{
  "openapi": "3.0.1",
  "info": {
    "title": "Orbis RESTfull web services documentation",
    "version": "0.1"
  },
  "paths": {
    "/api/Orbis/Companies/Data": {
      "description": "Retreive data",
      "get": {
        "tags": [
          "Data"
        ],
        "description": "Retrieve Data",
        "operationId": "CompaniesDataGet",
        "parameters": [
          {
            "name": "Query",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Companies.Data.Query"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Data.Response.OK"
          },
          "400": {
            "$ref": "#/components/responses/Response.BadRequest"
          }
        }
      },
      "post": {
        "tags": [
          "Data"
        ],
        "description": "Retrieve Data",
        "operationId": "CompaniesDataPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Query": {
                    "$ref": "#/components/schemas/Companies.Data.Query"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Data.Response.OK"
          },
          "400": {
            "$ref": "#/components/responses/Response.BadRequest"
          }
        }
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Companies/Store": {
      "description": "",
      "get": {
        "tags": [
          "Store"
        ],
        "description": "List all the possible Store categories",
        "operationId": "StoresListGet",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Store.Response.OK"
          }
        }
      }
    },
    "/api/Orbis/Companies/Store/RecordSets": {
      "description": "",
      "get": {
        "tags": [
          "Store",
          "RecordSets"
        ],
        "description": "List all the stored record set",
        "operationId": "listRecordSetGet",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordsSet.List.Response.OK"
          }
        }
      },
      "post": {
        "tags": [
          "Store",
          "RecordSets"
        ],
        "description": "Create a new record set",
        "operationId": "createRecordSetPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Query": {
                    "$ref": "#/components/schemas/Companies.Store.Query"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordSet.Summary"
          }
        }
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Companies/Store/RecordSets/{target}": {
      "description": "",
      "get": {
        "tags": [
          "Store",
          "RecordSets"
        ],
        "description": "Explore a record set",
        "operationId": "exploreRecordSetGet",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordsSet.Explore.Response.OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Store",
          "RecordSets"
        ],
        "description": "Delete a record set",
        "operationId": "deleteRecordSet",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordSet.Summary"
          }
        }
      },
      "parameters": [
        {
          "name": "target",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Companies/Store/RecordSets/{operation}/{target}": {
      "description": "",
      "put": {
        "tags": [
          "Store",
          "RecordSets"
        ],
        "description": "Modify an existing record set",
        "operationId": "modifyRecordSetsPut",
        "parameters": [
          {
            "name": "operation",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "Add",
                      "Remove"
                    ],
                    "type": "string",
                    "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Add - Add the entities specified in Query into the set\r\n* Remove - Remove the entities specified in the Query into the set\r\n"
                  }
                },
                {
                  "enum": [
                    "Add",
                    "Remove"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Add - Add the entities specified in Query into the set\r\n* Remove - Remove the entities specified in the Query into the set\r\n"
                }
              ]
            }
          },
          {
            "name": "target",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An id of a record set obtained through operation **listRecordSet**"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Query": {
                    "$ref": "#/components/schemas/Companies.Store.Query"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordSet.Summary"
          }
        }
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Companies/Store/Presets": {
      "description": "",
      "get": {
        "tags": [
          "Store",
          "Presets"
        ],
        "description": "List all the stored presets",
        "operationId": "listPresetGet",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PreSet.List.Response.OK"
          }
        }
      },
      "post": {
        "tags": [
          "Store",
          "Presets"
        ],
        "description": "Create a new preset",
        "operationId": "createPresetPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Query": {
                    "$ref": "#/components/schemas/Companies.Store.Query"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Preset.Summary"
          }
        }
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Ownership/OwnershipExplorer": {
      "description": "Retreive ownership data",
      "get": {
        "tags": [
          "OwnershipExplorer"
        ],
        "description": "Retrieve Data",
        "operationId": "OwnershipExplorerGet",
        "parameters": [
          {
            "name": "Query",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ownership.Query"
                }
              }
            }
          }
        ],
        "responses": {}
      },
      "post": {
        "tags": [
          "OwnershipExplorer"
        ],
        "description": "Retrieve ownership Data",
        "operationId": "OwnershipExplorerPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Query": {
                    "$ref": "#/components/schemas/Ownership.Query"
                  }
                }
              }
            }
          }
        },
        "responses": {}
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Ownership/PathFinder": {
      "description": "Retreive ownership data",
      "get": {
        "tags": [
          "OwnershipExplorer"
        ],
        "description": "Retrieve Data",
        "operationId": "PathFinderGet",
        "parameters": [
          {
            "name": "Query",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ownership.Query"
                }
              }
            }
          }
        ],
        "responses": {}
      },
      "post": {
        "tags": [
          "OwnershipExplorer"
        ],
        "description": "Retrieve ownership Data",
        "operationId": "PathFinderPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Query": {
                    "$ref": "#/components/schemas/Ownership.Query"
                  }
                }
              }
            }
          }
        },
        "responses": {}
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Companies/CustomData": {
      "description": "Get CustomData definitions",
      "get": {
        "description": "List CustomData definitions",
        "operationId": "getCustomdataDefinitions",
        "responses": {
          "200": {
            "description": "CustomData Definitions",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "MainTable"
                  ],
                  "type": "object",
                  "properties": {
                    "Picklists": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomData.Picklist"
                      },
                      "description": "List of picklists"
                    },
                    "CustomKeyTables": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomData.CustomKeyTable"
                      },
                      "description": "List of CustomKeyTables"
                    },
                    "IndustryCodesTables": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomData.CustomKeyTable"
                      },
                      "description": "List of IndustryCodesTables"
                    },
                    "GeographicTables": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomData.CustomKeyTable"
                      },
                      "description": "List of GeographicTables"
                    },
                    "MainTable": {
                      "$ref": "#/components/schemas/CustomData.Table"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Companies/CustomData/Add": {
      "description": "Add CustomData to your Portfolio",
      "post": {
        "description": "Add CustomData",
        "operationId": "addToCustomDataPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CustomData.Data"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result of the Add action",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Companies/CustomData/Replace": {
      "description": "Replace CustomData in your Portfolio",
      "put": {
        "description": "Replace CustomData",
        "operationId": "replaceCustomDataPut",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CustomData.Data"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result of the Replace action",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Companies/CustomData/Remove": {
      "description": "Remove CustomData from your Portfolio",
      "put": {
        "description": "Remove CustomData",
        "operationId": "removeFromCustomDataPut",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "records": {
                    "$ref": "#/components/schemas/CustomData.Records"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result of the Remove action",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/Contacts/Data": {
      "description": "Retreive data",
      "get": {
        "tags": [
          "Data"
        ],
        "description": "Retrieve Data",
        "operationId": "ContactsDataGet",
        "parameters": [
          {
            "name": "Query",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contacts.Data.Query"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Data.Response.OK"
          },
          "400": {
            "$ref": "#/components/responses/Response.BadRequest"
          }
        }
      },
      "post": {
        "tags": [
          "Data"
        ],
        "description": "Retrieve Data",
        "operationId": "ContactsDataPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Query": {
                    "$ref": "#/components/schemas/Contacts.Data.Query"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Data.Response.OK"
          },
          "400": {
            "$ref": "#/components/responses/Response.BadRequest"
          }
        }
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    },
    "/api/Orbis/News/Data": {
      "description": "Retreive data",
      "get": {
        "tags": [
          "Data"
        ],
        "description": "Retrieve Data",
        "operationId": "NewsDataGet",
        "parameters": [
          {
            "name": "Query",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/News.Data.Query"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Data.Response.OK"
          },
          "400": {
            "$ref": "#/components/responses/Response.BadRequest"
          }
        }
      },
      "post": {
        "tags": [
          "Data"
        ],
        "description": "Retrieve Data",
        "operationId": "NewsDataPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Query": {
                    "$ref": "#/components/schemas/News.Data.Query"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Data.Response.OK"
          },
          "400": {
            "$ref": "#/components/responses/Response.BadRequest"
          }
        }
      },
      "parameters": [
        {
          "name": "apitoken",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A connection token obtained from the administration site"
          }
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "Companies.Data.Query": {
        "required": [
          "Where"
        ],
        "type": "object",
        "properties": {
          "Globals": {
            "$ref": "#/components/schemas/Companies.Globals"
          },
          "Where": {
            "$ref": "#/components/schemas/Companies.Where"
          },
          "Select": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Select.Preset"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Select.Entry"
                }
              }
            ],
            "description": "SELECT which data of the records found should be returned.Select the data field to be returned"
          },
          "OrderBy": {
            "maxProperties": 1,
            "minProperties": 1,
            "type": "object",
            "properties": {
              "DESC": {
                "$ref": "#/components/schemas/Select.SortEntry"
              },
              "ASC": {
                "$ref": "#/components/schemas/Select.SortEntry"
              }
            },
            "description": "Sort the result array using the field(s) defined here."
          },
          "Range": {
            "type": "object",
            "properties": {
              "Max": {
                "maximum": 4000,
                "minimum": 0,
                "type": "integer",
                "description": "Maximum number of records returned"
              },
              "Offset": {
                "type": "integer",
                "description": "Index of the first (sorted)records that is returned"
              }
            }
          }
        }
      },
      "Companies.Globals": {
        "type": "object",
        "properties": {
          "Preferences": {
            "$ref": "#/components/schemas/Companies.Preferences"
          },
          "Language": {
            "$ref": "#/components/schemas/Language"
          },
          "SelectDefault": {
            "$ref": "#/components/schemas/Companies.SelectDefault"
          },
          "BODefinition": {
            "$ref": "#/components/schemas/Companies.BODefinition"
          },
          "GUODefinition": {
            "$ref": "#/components/schemas/Companies.GUODefinition"
          }
        },
        "description": "All parameters that have a global impact on the results"
      },
      "Companies.Preferences": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "AllStatement",
                "RecentAccount",
                "NoLimitedFinancial",
                "Consolidated",
                "LocalRegistry",
                "Unconsolidated",
                "AnnualReport",
                "NoNoRecentFinancial"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllStatement - \r\n* RecentAccount - Orbis\r\n* NoLimitedFinancial - Orbis\r\n* Consolidated - Orbis\r\n* LocalRegistry - Orbis\r\n* Unconsolidated - Orbis\r\n* AnnualReport - Orbis\r\n* NoNoRecentFinancial - Orbis\r\n"
            }
          },
          {
            "enum": [
              "AllStatement",
              "RecentAccount",
              "NoLimitedFinancial",
              "Consolidated",
              "LocalRegistry",
              "Unconsolidated",
              "AnnualReport",
              "NoNoRecentFinancial"
            ],
            "type": "string",
            "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllStatement - \r\n* RecentAccount - Orbis\r\n* NoLimitedFinancial - Orbis\r\n* Consolidated - Orbis\r\n* LocalRegistry - Orbis\r\n* Unconsolidated - Orbis\r\n* AnnualReport - Orbis\r\n* NoNoRecentFinancial - Orbis\r\n"
          }
        ]
      },
      "Language": {
        "enum": [
          "en",
          "fr",
          "de",
          "it",
          "es",
          "jp",
          "ru",
          "cn"
        ],
        "type": "string",
        "description": "Let the user specify the language preference\r\n\r\nEnum Description\r\n\r\n\r\n* en - English\r\n* fr - French\r\n* de - German\r\n* it - Italian\r\n* es - Spanish\r\n* jp - Japanese\r\n* ru - Russian\r\n* cn - Chinese (simplified)\r\n"
      },
      "Companies.SelectDefault": {
        "type": "object",
        "properties": {
          "Currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "Unit": {
            "enum": [
              0,
              3,
              6,
              9
            ],
            "type": "integer",
            "description": "Let the user specify the unit preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Units\r\n* 3 - thousand\r\n* 6 - million\r\n* 9 - billion\r\n"
          },
          "Limit": {
            "type": "integer",
            "description": "Let the user specify the repeating limit preference globally"
          },
          "ModelId": {
            "enum": [
              "IND_WVB",
              "IND",
              "BNK",
              "IND_IT",
              "IND_REUTERS",
              "IND_IT_DYNAMIC_MODEL",
              "INS",
              "UNIVERSAL"
            ],
            "type": "string",
            "description": "Let the user specify the model preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* IND_WVB - non-US accounts\r\n* IND - Corporate\r\n* BNK - Banks\r\n* IND_IT - Italy\r\n* IND_REUTERS - US accounts\r\n* IND_IT_DYNAMIC_MODEL - Italian national format dynamic model\r\n* INS - Insurance companies\r\n* UNIVERSAL - All templates\r\n"
          },
          "FX": {
            "enum": [
              "AtEachClosingDate",
              "AtLastClosingDate",
              "MyRates"
            ],
            "type": "string",
            "description": "Let the user specify the foreign exchange preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* AtEachClosingDate - AtEachClosingDate\r\n* AtLastClosingDate - AtLastClosingDate\r\n* MyRates - MyRates\r\n"
          },
          "VALUERANGE": {
            "enum": [
              "Estimate",
              "LBound",
              "UBound"
            ],
            "type": "string",
            "description": "Let the user specify determines what type of estimation to use when the value is based on range preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* Estimate - Estimate\r\n* LBound - LBound\r\n* UBound - UBound\r\n"
          }
        }
      },
      "Currency": {
        "enum": [
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BTN",
          "BWP",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHF",
          "CLP",
          "CNY",
          "COP",
          "CRC",
          "CUP",
          "CVE",
          "CYP",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EEK",
          "EGP",
          "ERN",
          "ETB",
          "EUR",
          "FJD",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GWP",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KPW",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LTL",
          "LVL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRO",
          "MRU",
          "MTL",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SKK",
          "SLL",
          "SOS",
          "SRD",
          "SSP",
          "STN",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "UYU",
          "UZS",
          "VES",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XCD",
          "XOF",
          "XPF",
          "YER",
          "ZAR",
          "ZMW",
          "ZWD"
        ],
        "type": "string",
        "description": "Currency for money values"
      },
      "Companies.BODefinition": {
        "type": "object",
        "properties": {
          "FirstLevelMinimumPercentage": {
            "maximum": 100,
            "minimum": 5,
            "type": "number",
            "description": "The minimum percentage for BO at first level must be between 5% and 100%",
            "format": "double"
          },
          "FurtherLevelsMinimumPercentage": {
            "maximum": 100,
            "minimum": 5,
            "type": "number",
            "description": "The minimum percentage for BO at any level must be between 5% and 100%",
            "format": "double"
          },
          "TopShareholdersWithUnknownPercentage": {
            "type": "boolean",
            "description": "Consider individuals at the top with an unknown percentage as beneficial owner"
          },
          "TopShareholdersWithFirstLevelMinimumPercentage": {
            "enum": [
              "FollowingPathDefinition",
              "Path100Percent"
            ],
            "type": "string",
            "description": "Consider individuals at the top with minimum percentage at first level and with either minimum percentage at further levels or 100% at further levels.\r\n\r\nEnum Description\r\n\r\n\r\n* FollowingPathDefinition - FollowingPathDefinition\r\n* Path100Percent - Path100Percent\r\n"
          }
        }
      },
      "Companies.GUODefinition": {
        "type": "object",
        "properties": {
          "MinimumPercentage": {
            "enum": [
              50.01,
              25.01
            ],
            "type": "number",
            "format": "double"
          },
          "UnidentifiedShareholders": {
            "type": "boolean",
            "description": "I consider a company to be an Ultimate Owner if it has no identified shareholders or if its shareholder's percentages are not known."
          },
          "HighestQuoted": {
            "type": "boolean",
            "description": "I want the highest quoted company to be considered the Ultimate Owner."
          },
          "Types": {
            "type": "object",
            "properties": {
              "Bank": {
                "type": "boolean",
                "description": "Include banks"
              },
              "FinancialCompany": {
                "type": "boolean",
                "description": "Include financial companies"
              },
              "InsuranceCompany": {
                "type": "boolean",
                "description": "Include insurance companies"
              },
              "Corporate": {
                "type": "boolean",
                "description": "Include corporate companies"
              },
              "PrivateEquityFirm": {
                "type": "boolean",
                "description": "Include private equity firms"
              },
              "HedgeFund": {
                "type": "boolean",
                "description": "Include hedge funds"
              },
              "VentureCapital": {
                "type": "boolean",
                "description": "Include venture capitals"
              },
              "MutualPensionFundOrTrust": {
                "type": "boolean",
                "description": "Include mutual & pension Fund/Nominee/Trust/Trustee"
              },
              "Foundation": {
                "type": "boolean",
                "description": "Include foundation/research institutes"
              },
              "PublicAuthority": {
                "type": "boolean",
                "description": "Include public authorities, states, governments"
              },
              "Individual": {
                "type": "boolean",
                "description": "Include individuals"
              },
              "ManagerOrDirector": {
                "type": "boolean",
                "description": "Include employees/managers/directors"
              }
            }
          }
        }
      },
      "Companies.Where": {
        "oneOf": [
          {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Companies.Where"
            },
            "description": "An array of Companies.Where associated with a boolean AND operation"
          },
          {
            "$ref": "#/components/schemas/Companies.WhereObject"
          },
          {
            "enum": [
              "AllAMBestRated",
              "AllChineseCompaniesScoredByCreditReform",
              "AllCompanies",
              "AllCompaniesInPortfolio",
              "AllCompaniesWithAdditionalAccounts",
              "AllCompaniesWithAddress",
              "AllCompaniesWithCDS",
              "AllCompaniesWithCrifFinancialStabilityScoreTrend",
              "AllCompaniesWithEarningEstimates",
              "AllCompaniesWithEmail",
              "AllCompaniesWithEthnicMinorities",
              "AllCompaniesWithFaxNumber",
              "AllCompaniesWithFilingExemptionDetails",
              "AllCompaniesWithInterimData",
              "AllCompaniesWithIssuedDebt",
              "AllCompaniesWithLEI",
              "AllCompaniesWithModeFinanceMORECreditRiskScoreTrend",
              "AllCompaniesWithNationalScoreCortera",
              "AllCompaniesWithNationalScoreCrif",
              "AllCompaniesWithOverview",
              "AllCompaniesWithOwnData",
              "AllCompaniesWithPhoneNumber",
              "AllCompaniesWithProjectedFinancials",
              "AllCompaniesWithTradeDescription",
              "AllCompaniesWithUnusualAccountingPeriod",
              "AllCompaniesWithWebsiteAddress",
              "AllCompaniesWithWomen",
              "AllCompaniesWithZandersFalconCounterpartyRiskScoreTrend",
              "AllFitchRated",
              "AllGlobalSIFIs",
              "AllLegalEvents",
              "AllMoodysRated",
              "AllMorningstarRated",
              "AllRecordsWithNotes",
              "AllReinsuranceCompanies",
              "AllSPRated"
            ],
            "type": "string",
            "description": "Simple string as criteria name. All records with such a criteria are selected"
          }
        ],
        "description": "Define a way to filter/search records *where* some specified criteria matched some specified values"
      },
      "Companies.WhereObject": {
        "maxProperties": 1,
        "minProperties": 1,
        "type": "object",
        "properties": {
          "And": {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Companies.Where"
            },
            "description": "boolean operator AND applied on the array of object"
          },
          "Or": {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Companies.Where"
            }
          },
          "Not": {
            "maximum": 1,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Companies.Where"
            }
          },
          "RecordSet": {
            "type": "string",
            "description": "Use a selection from the /Store/Recordsets identified by its .Id"
          },
          "DirectSelection": {
            "enum": [
              "AllAMBestRated",
              "AllChineseCompaniesScoredByCreditReform",
              "AllCompanies",
              "AllCompaniesInPortfolio",
              "AllCompaniesWithAdditionalAccounts",
              "AllCompaniesWithAddress",
              "AllCompaniesWithCDS",
              "AllCompaniesWithCrifFinancialStabilityScoreTrend",
              "AllCompaniesWithEarningEstimates",
              "AllCompaniesWithEmail",
              "AllCompaniesWithEthnicMinorities",
              "AllCompaniesWithFaxNumber",
              "AllCompaniesWithFilingExemptionDetails",
              "AllCompaniesWithInterimData",
              "AllCompaniesWithIssuedDebt",
              "AllCompaniesWithLEI",
              "AllCompaniesWithModeFinanceMORECreditRiskScoreTrend",
              "AllCompaniesWithNationalScoreCortera",
              "AllCompaniesWithNationalScoreCrif",
              "AllCompaniesWithOverview",
              "AllCompaniesWithOwnData",
              "AllCompaniesWithPhoneNumber",
              "AllCompaniesWithProjectedFinancials",
              "AllCompaniesWithTradeDescription",
              "AllCompaniesWithUnusualAccountingPeriod",
              "AllCompaniesWithWebsiteAddress",
              "AllCompaniesWithWomen",
              "AllCompaniesWithZandersFalconCounterpartyRiskScoreTrend",
              "AllFitchRated",
              "AllGlobalSIFIs",
              "AllLegalEvents",
              "AllMoodysRated",
              "AllMorningstarRated",
              "AllRecordsWithNotes",
              "AllReinsuranceCompanies",
              "AllSPRated"
            ],
            "type": "string"
          },
          "AcceptedStep": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "AccountingPractice": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "AccountingTemplate": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "AccountType": {
            "$ref": "#/components/schemas/Companies.Where.AccountType"
          },
          "ActiveRootStatusForFDICRBC": {
            "$ref": "#/components/schemas/BvDLiveStatus.Where.Status"
          },
          "ActiveRootStatusForHeadquarters": {
            "$ref": "#/components/schemas/BvDLiveStatus.Where.Status"
          },
          "AllHeadquarters": {
            "$ref": "#/components/schemas/Where.NumericIntegral"
          },
          "AllPublicTenders": {
            "$ref": "#/components/schemas/PublicTenders.Where.DirectSearch"
          },
          "AllPublicTendersCompanies": {
            "$ref": "#/components/schemas/PublicTendersCompanies.Where.DirectSearch"
          },
          "AllWithIdentifier": {
            "required": [
              "IdTypes"
            ],
            "type": "object",
            "properties": {
              "IdTypes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "ANZSIC2006": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "ApplicationNumber": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "BeneficialOwnersName": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Where.Text"
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "BODefinition": {
                        "type": "string"
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "BondDataIsin": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "BranchesNumber": {
            "$ref": "#/components/schemas/Where.NumericIntegral"
          },
          "BvD9": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "BvDId": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "BvDLienIdsInTree": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "City": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "ClosingMonthOfLatestAccounts": {
            "$ref": "#/components/schemas/Companies.Where.ClosingMonthOfLatestAccounts"
          },
          "CNAE": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "CNAE22": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "CompanyCategory": {
            "$ref": "#/components/schemas/Companies.Where.CompanyCategory"
          },
          "CompanyName": {
            "$ref": "#/components/schemas/Companies.Where.Quick"
          },
          "CompanyNameForDashboard": {
            "$ref": "#/components/schemas/Companies.Where.Quick"
          },
          "ContactAdvisor": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "ContactAdvisorName": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "ContactDirectorName": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "Contacts": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "Contacts4Mailing": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "CoreNace2008CodeInTree": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "CoreNaics2008CodeInTree": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "CorteraMatrix": {
            "$ref": "#/components/schemas/Where.CorteraMatrixSearch"
          },
          "CountryCodeInTree": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "CountryRegion": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "AddressType": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "AddressType": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "CountryRegionOwnership": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "AddressType": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "AddressType": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "CountryRegionSegmentation": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "AddressType": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "AddressType": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "CountryRegionStringSearch": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "AddressType": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "AddressType": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "CPC": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CodeType": {
                        "type": "string"
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CodeType": {
                        "type": "string"
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ],
            "description": "Import all the entity FROM another database"
          },
          "CpyTypeInTree": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "CreditDefaultSwapsFinancials": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "CrifFinancialStabilityScore": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "",
                    "0:100",
                    "101:200",
                    "201:300",
                    "301:400",
                    "401:500",
                    "501:600",
                    "601:700",
                    "701:800",
                    "801:900",
                    "901:1000"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n*  - Any range\r\n* 0:100 - 1-100\r\n* 101:200 - 101-200\r\n* 201:300 - 201-300\r\n* 301:400 - 301-400\r\n* 401:500 - 401-500\r\n* 501:600 - 501-600\r\n* 601:700 - 601-700\r\n* 701:800 - 701-800\r\n* 801:900 - 801-900\r\n* 901:1000 - 901-1000\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "CrifFinancialStabilityScoreTrend": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "",
                    "0:100",
                    "101:200",
                    "201:300",
                    "301:400",
                    "401:500",
                    "501:600",
                    "601:700",
                    "701:800",
                    "801:900",
                    "901:1000"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n*  - Any range\r\n* 0:100 - 1-100\r\n* 101:200 - 101-200\r\n* 201:300 - 201-300\r\n* 301:400 - 301-400\r\n* 401:500 - 401-500\r\n* 501:600 - 501-600\r\n* 601:700 - 601-700\r\n* 701:800 - 701-800\r\n* 801:900 - 801-900\r\n* 901:1000 - 901-1000\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "CSIC2011": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "EntityType": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "Financials": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "FinancialsUdv": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "FiveYearsRating": {
            "$ref": "#/components/schemas/Companies.Where.FiveYearsRating"
          },
          "ForListStep": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "FromContacts": {
            "$ref": "#/components/schemas/Contacts.Where"
          },
          "FromFunds": {
            "$ref": "#/components/schemas/Funds.Where"
          },
          "FSBvDValuationMtx": {
            "type": "object",
            "properties": {
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "G2CompassScore": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "",
                    "0:100",
                    "101:200",
                    "201:300",
                    "301:400",
                    "401:500",
                    "501:600",
                    "601:700",
                    "701:800",
                    "801:900",
                    "901:1000"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n*  - Any range\r\n* 0:100 - 1-100\r\n* 101:200 - 101-200\r\n* 201:300 - 201-300\r\n* 301:400 - 301-400\r\n* 401:500 - 401-500\r\n* 501:600 - 501-600\r\n* 601:700 - 601-700\r\n* 701:800 - 701-800\r\n* 801:900 - 801-900\r\n* 901:1000 - 901-1000\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "HeadQuartersOnly": {
            "$ref": "#/components/schemas/Where.NumericIntegral"
          },
          "Identifiers": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Where.Ids"
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CountryFilter": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "IDSIC": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "ImpliedRating": {
            "$ref": "#/components/schemas/Companies.Where.ImpliedRating"
          },
          "IndependenceIndicator": {
            "$ref": "#/components/schemas/Companies.Where.IndependenceIndicator"
          },
          "IPC": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CodeType": {
                        "type": "string"
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CodeType": {
                        "type": "string"
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ],
            "description": "Import all the entity FROM another database"
          },
          "ISIC": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "IsinDirect": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "KRSIC": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "KZOKED": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "LatestYearOfAccounts": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "LegalEntityIdentifier": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "LegalEventsDate": {
            "$ref": "#/components/schemas/Where.NumericDateRelative"
          },
          "LegalEventsSource": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "LegalEventsType": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "LEIAssignmentDate": {
            "$ref": "#/components/schemas/Where.NumericDateRelative"
          },
          "LEIManagementLocalOperatingUnit": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "LEIRegistrationStatus": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "LEIRenewDate": {
            "$ref": "#/components/schemas/Where.NumericDateRelative"
          },
          "ListedUnlisted": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "ListingStatus": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "MADealType": {
            "$ref": "#/components/schemas/MADealType.Where.ZephyrDeals"
          },
          "MajorSector": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "ManualReviewStep": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "MarketCapitalisationCurrent": {
            "type": "object",
            "properties": {
              "Min": {
                "type": "number",
                "format": "double"
              },
              "Max": {
                "type": "number",
                "format": "double"
              },
              "Currency": {
                "type": "string"
              }
            }
          },
          "Match": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Companies.Where.Match"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Companies.Where.Match"
                },
                "description": "All the matches are executed and the results are joined with a logical OR operator"
              }
            ]
          },
          "MetropolitanStatisticalArea": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "ModeFinanceMORECreditLimit": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "ModeFinanceMORECreditRiskScore": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "10",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - AAA\r\n* 10 - D\r\n* 2 - AA\r\n* 3 - A\r\n* 4 - BBB\r\n* 5 - BB\r\n* 6 - B\r\n* 7 - CCC\r\n* 8 - CC\r\n* 9 - C\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "ModeFinanceMORECreditRiskScoreTrend": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "10",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - AAA\r\n* 10 - D\r\n* 2 - AA\r\n* 3 - A\r\n* 4 - BBB\r\n* 5 - BB\r\n* 6 - B\r\n* 7 - CCC\r\n* 8 - CC\r\n* 9 - C\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "ModeFinanceMOREProbablyOfDefault": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "ModeFinanceQualitativeCL": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "ModeFinanceQualitativeScore": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - A\r\n* 2 - B\r\n* 3 - C\r\n* 4 - D\r\n* 5 - E\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "Nace2": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "Nace2MainSection": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "Nace2Segmentation": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "NACEBEL2008": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "NAF2": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "Naics2012": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "Naics2012Segmentation": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "Naics2017": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "Naics2017Segmentation": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "NationalLegalForm": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "NewDivestingShareholders": {
            "$ref": "#/components/schemas/NewDivestingShareholders.Where.ZephyrDeals"
          },
          "NIC2008": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "NumberOfEmployeesInTree": {
            "$ref": "#/components/schemas/Where.NumericDecimal"
          },
          "NumberOfPatents": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "NumberOfYearsWithAccounts": {
            "$ref": "#/components/schemas/Companies.Where.NumberOfYearsWithAccounts"
          },
          "NutsClassification": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "OKVED": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "OKVED2014": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "OriginalDatabase": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "OwnershipWorldRegions": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "AddressType": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "AddressType": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "P2Invest": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - A\r\n* 2 - B\r\n* 3 - C\r\n* 4 - D\r\n* 5 - E\r\n* 6 - F\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "PatentDate": {
            "$ref": "#/components/schemas/Where.NumericDateRelative"
          },
          "Patents": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CodeType": {
                        "type": "string"
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CodeType": {
                        "type": "string"
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ],
            "description": "Import all the entity FROM another database"
          },
          "PatentText": {
            "$ref": "#/components/schemas/Patents.Where.Document"
          },
          "PeRatio": {
            "$ref": "#/components/schemas/Companies.Where.PeRatio"
          },
          "Phone": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "PortfolioAllWithValue": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "PortfolioIndicators": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "PortfolioValue": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "PortfolioValueTrend": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "PostCode": {
            "$ref": "#/components/schemas/Companies.Where.PostCode"
          },
          "PSIC2010": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "PublicInterestEntities": {
            "type": "object",
            "properties": {
              "CreditInstitution": {
                "type": "boolean"
              },
              "InsuranceUndertaking": {
                "type": "boolean"
              },
              "QuotedCompany": {
                "type": "boolean"
              },
              "ExcludeNonEUEntities": {
                "type": "boolean"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "QuickSearch": {
            "$ref": "#/components/schemas/Companies.Where.Quick"
          },
          "Radius": {
            "$ref": "#/components/schemas/Where.Radius"
          },
          "Recommendations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Where.Ids"
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "TypeParameter": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "RecordId": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "RegionsInTree": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "RegulatorsLevelCountry": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "RepRiskIndex": {
            "type": "object",
            "properties": {
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "monthly-0",
                    "monthly-1",
                    "monthly-10",
                    "monthly-11",
                    "monthly-12",
                    "monthly-13",
                    "monthly-14",
                    "monthly-15",
                    "monthly-16",
                    "monthly-17",
                    "monthly-18",
                    "monthly-19",
                    "monthly-2",
                    "monthly-20",
                    "monthly-21",
                    "monthly-22",
                    "monthly-23",
                    "monthly-24",
                    "monthly-25",
                    "monthly-26",
                    "monthly-27",
                    "monthly-28",
                    "monthly-29",
                    "monthly-3",
                    "monthly-30",
                    "monthly-31",
                    "monthly-32",
                    "monthly-33",
                    "monthly-34",
                    "monthly-35",
                    "monthly-36",
                    "monthly-4",
                    "monthly-5",
                    "monthly-6",
                    "monthly-7",
                    "monthly-8",
                    "monthly-9",
                    "year-0",
                    "year-1",
                    "year-2"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Current value\r\n* monthly-0 - Last available month\r\n* monthly-1 - Last available month -1\r\n* monthly-10 - Last available month -10\r\n* monthly-11 - Last available year\r\n* monthly-12 - 12 months\r\n* monthly-13 - Last available month -13\r\n* monthly-14 - Last available month -14\r\n* monthly-15 - Last available month -15\r\n* monthly-16 - Last available month -16\r\n* monthly-17 - Last available month -17\r\n* monthly-18 - Last available month -18\r\n* monthly-19 - Last available month -19\r\n* monthly-2 - Last available month -2\r\n* monthly-20 - Last available month -20\r\n* monthly-21 - Last available month -21\r\n* monthly-22 - Last available month -22\r\n* monthly-23 - Last available year -1\r\n* monthly-24 - Last available month -24\r\n* monthly-25 - Last available month -25\r\n* monthly-26 - Last available month -26\r\n* monthly-27 - Last available month -27\r\n* monthly-28 - Last available month -28\r\n* monthly-29 - Last available month -29\r\n* monthly-3 - 3 months\r\n* monthly-30 - Last available month -30\r\n* monthly-31 - Last available month -31\r\n* monthly-32 - Last available month -32\r\n* monthly-33 - Last available month -33\r\n* monthly-34 - Last available month -34\r\n* monthly-35 - Last available year -2\r\n* monthly-36 - Last available month -36\r\n* monthly-4 - Last available month -4\r\n* monthly-5 - Last available month -5\r\n* monthly-6 - 6 months\r\n* monthly-7 - Last available month -7\r\n* monthly-8 - Last available month -8\r\n* monthly-9 - 9 months\r\n* year-0 - Last available year\r\n* year-1 - Last available year -1\r\n* year-2 - Last available year -2\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "RepRiskIndexTrend": {
            "type": "object",
            "properties": {
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "monthly-0",
                    "monthly-1",
                    "monthly-10",
                    "monthly-11",
                    "monthly-12",
                    "monthly-13",
                    "monthly-14",
                    "monthly-15",
                    "monthly-16",
                    "monthly-17",
                    "monthly-18",
                    "monthly-19",
                    "monthly-2",
                    "monthly-20",
                    "monthly-21",
                    "monthly-22",
                    "monthly-23",
                    "monthly-24",
                    "monthly-25",
                    "monthly-26",
                    "monthly-27",
                    "monthly-28",
                    "monthly-29",
                    "monthly-3",
                    "monthly-30",
                    "monthly-31",
                    "monthly-32",
                    "monthly-33",
                    "monthly-34",
                    "monthly-35",
                    "monthly-36",
                    "monthly-4",
                    "monthly-5",
                    "monthly-6",
                    "monthly-7",
                    "monthly-8",
                    "monthly-9",
                    "year-0",
                    "year-1",
                    "year-2"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Current value\r\n* monthly-0 - Last available month\r\n* monthly-1 - Last available month -1\r\n* monthly-10 - Last available month -10\r\n* monthly-11 - Last available year\r\n* monthly-12 - 12 months\r\n* monthly-13 - Last available month -13\r\n* monthly-14 - Last available month -14\r\n* monthly-15 - Last available month -15\r\n* monthly-16 - Last available month -16\r\n* monthly-17 - Last available month -17\r\n* monthly-18 - Last available month -18\r\n* monthly-19 - Last available month -19\r\n* monthly-2 - Last available month -2\r\n* monthly-20 - Last available month -20\r\n* monthly-21 - Last available month -21\r\n* monthly-22 - Last available month -22\r\n* monthly-23 - Last available year -1\r\n* monthly-24 - Last available month -24\r\n* monthly-25 - Last available month -25\r\n* monthly-26 - Last available month -26\r\n* monthly-27 - Last available month -27\r\n* monthly-28 - Last available month -28\r\n* monthly-29 - Last available month -29\r\n* monthly-3 - 3 months\r\n* monthly-30 - Last available month -30\r\n* monthly-31 - Last available month -31\r\n* monthly-32 - Last available month -32\r\n* monthly-33 - Last available month -33\r\n* monthly-34 - Last available month -34\r\n* monthly-35 - Last available year -2\r\n* monthly-36 - Last available month -36\r\n* monthly-4 - Last available month -4\r\n* monthly-5 - Last available month -5\r\n* monthly-6 - 6 months\r\n* monthly-7 - Last available month -7\r\n* monthly-8 - Last available month -8\r\n* monthly-9 - 9 months\r\n* year-0 - Last available year\r\n* year-1 - Last available year -1\r\n* year-2 - Last available year -2\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "RepRiskRating": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "10",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - AAA\r\n* 10 - D\r\n* 2 - AA\r\n* 3 - A\r\n* 4 - BBB\r\n* 5 - BB\r\n* 6 - B\r\n* 7 - CCC\r\n* 8 - CC\r\n* 9 - C\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "10",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "monthly-0",
                    "monthly-1",
                    "monthly-10",
                    "monthly-11",
                    "monthly-12",
                    "monthly-13",
                    "monthly-14",
                    "monthly-15",
                    "monthly-16",
                    "monthly-17",
                    "monthly-18",
                    "monthly-19",
                    "monthly-2",
                    "monthly-20",
                    "monthly-21",
                    "monthly-22",
                    "monthly-23",
                    "monthly-24",
                    "monthly-25",
                    "monthly-26",
                    "monthly-27",
                    "monthly-28",
                    "monthly-29",
                    "monthly-3",
                    "monthly-30",
                    "monthly-31",
                    "monthly-32",
                    "monthly-33",
                    "monthly-34",
                    "monthly-35",
                    "monthly-36",
                    "monthly-4",
                    "monthly-5",
                    "monthly-6",
                    "monthly-7",
                    "monthly-8",
                    "monthly-9",
                    "year-0",
                    "year-1",
                    "year-2"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available month\r\n* 1 - Last available month -1\r\n* 10 - Last available month -10\r\n* 2 - Last available month -2\r\n* 3 - Last available month -3\r\n* 4 - Last available month -4\r\n* 5 - Last available month -5\r\n* 6 - Last available month -6\r\n* 7 - Last available month -7\r\n* 8 - Last available month -8\r\n* 9 - Last available month -9\r\n* monthly-0 - Last available month\r\n* monthly-1 - Last available month -1\r\n* monthly-10 - Last available month -10\r\n* monthly-11 - Last available year\r\n* monthly-12 - Last available month -12\r\n* monthly-13 - Last available month -13\r\n* monthly-14 - Last available month -14\r\n* monthly-15 - Last available month -15\r\n* monthly-16 - Last available month -16\r\n* monthly-17 - Last available month -17\r\n* monthly-18 - Last available month -18\r\n* monthly-19 - Last available month -19\r\n* monthly-2 - Last available month -2\r\n* monthly-20 - Last available month -20\r\n* monthly-21 - Last available month -21\r\n* monthly-22 - Last available month -22\r\n* monthly-23 - Last available year -1\r\n* monthly-24 - Last available month -24\r\n* monthly-25 - Last available month -25\r\n* monthly-26 - Last available month -26\r\n* monthly-27 - Last available month -27\r\n* monthly-28 - Last available month -28\r\n* monthly-29 - Last available month -29\r\n* monthly-3 - Last available month -3\r\n* monthly-30 - Last available month -30\r\n* monthly-31 - Last available month -31\r\n* monthly-32 - Last available month -32\r\n* monthly-33 - Last available month -33\r\n* monthly-34 - Last available month -34\r\n* monthly-35 - Last available year -2\r\n* monthly-36 - Last available month -36\r\n* monthly-4 - Last available month -4\r\n* monthly-5 - Last available month -5\r\n* monthly-6 - Last available month -6\r\n* monthly-7 - Last available month -7\r\n* monthly-8 - Last available month -8\r\n* monthly-9 - Last available month -9\r\n* year-0 - Last available year\r\n* year-1 - Last available year -1\r\n* year-2 - Last available year -2\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "RepRiskRatingTrend": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "10",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - AAA\r\n* 10 - D\r\n* 2 - AA\r\n* 3 - A\r\n* 4 - BBB\r\n* 5 - BB\r\n* 6 - B\r\n* 7 - CCC\r\n* 8 - CC\r\n* 9 - C\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "10",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "monthly-0",
                    "monthly-1",
                    "monthly-10",
                    "monthly-11",
                    "monthly-12",
                    "monthly-13",
                    "monthly-14",
                    "monthly-15",
                    "monthly-16",
                    "monthly-17",
                    "monthly-18",
                    "monthly-19",
                    "monthly-2",
                    "monthly-20",
                    "monthly-21",
                    "monthly-22",
                    "monthly-23",
                    "monthly-24",
                    "monthly-25",
                    "monthly-26",
                    "monthly-27",
                    "monthly-28",
                    "monthly-29",
                    "monthly-3",
                    "monthly-30",
                    "monthly-31",
                    "monthly-32",
                    "monthly-33",
                    "monthly-34",
                    "monthly-35",
                    "monthly-36",
                    "monthly-4",
                    "monthly-5",
                    "monthly-6",
                    "monthly-7",
                    "monthly-8",
                    "monthly-9",
                    "year-0",
                    "year-1",
                    "year-2"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available month\r\n* 1 - Last available month -1\r\n* 10 - Last available month -10\r\n* 2 - Last available month -2\r\n* 3 - Last available month -3\r\n* 4 - Last available month -4\r\n* 5 - Last available month -5\r\n* 6 - Last available month -6\r\n* 7 - Last available month -7\r\n* 8 - Last available month -8\r\n* 9 - Last available month -9\r\n* monthly-0 - Last available month\r\n* monthly-1 - Last available month -1\r\n* monthly-10 - Last available month -10\r\n* monthly-11 - Last available year\r\n* monthly-12 - Last available month -12\r\n* monthly-13 - Last available month -13\r\n* monthly-14 - Last available month -14\r\n* monthly-15 - Last available month -15\r\n* monthly-16 - Last available month -16\r\n* monthly-17 - Last available month -17\r\n* monthly-18 - Last available month -18\r\n* monthly-19 - Last available month -19\r\n* monthly-2 - Last available month -2\r\n* monthly-20 - Last available month -20\r\n* monthly-21 - Last available month -21\r\n* monthly-22 - Last available month -22\r\n* monthly-23 - Last available year -1\r\n* monthly-24 - Last available month -24\r\n* monthly-25 - Last available month -25\r\n* monthly-26 - Last available month -26\r\n* monthly-27 - Last available month -27\r\n* monthly-28 - Last available month -28\r\n* monthly-29 - Last available month -29\r\n* monthly-3 - Last available month -3\r\n* monthly-30 - Last available month -30\r\n* monthly-31 - Last available month -31\r\n* monthly-32 - Last available month -32\r\n* monthly-33 - Last available month -33\r\n* monthly-34 - Last available month -34\r\n* monthly-35 - Last available year -2\r\n* monthly-36 - Last available month -36\r\n* monthly-4 - Last available month -4\r\n* monthly-5 - Last available month -5\r\n* monthly-6 - Last available month -6\r\n* monthly-7 - Last available month -7\r\n* monthly-8 - Last available month -8\r\n* monthly-9 - Last available month -9\r\n* year-0 - Last available year\r\n* year-1 - Last available year -1\r\n* year-2 - Last available year -2\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "SBI2008": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "SFCRSolvencyII": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "ShareholderName2006": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Where.Text"
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CountryFilter": {
                        "type": "string"
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "SICUK2007": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "Size": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "SNISE2007": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "Specialisation": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "SSIC2010": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "SSIC2015": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "StandardisedLegalForm": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "Status": {
            "$ref": "#/components/schemas/BvDLiveStatus.Where.Status"
          },
          "StockExchange": {
            "type": "object",
            "properties": {
              "MainExchange": {
                "type": "string"
              },
              "Id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "StockIndices": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "StreetAddress": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "SubsidiaryName2006": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Where.Text"
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CountryFilter": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "TendersMatrix": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "TickerDirect": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "TickerNumber": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "ToBeReviewedLater": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "TotalAssestsInTree": {
            "$ref": "#/components/schemas/Where.NumericDecimal"
          },
          "TradeDescriptionLucene": {
            "$ref": "#/components/schemas/Companies.Where.Document"
          },
          "TrucostEnvironmentalScore": {
            "type": "object",
            "properties": {
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "TSEC": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "TSEC2010": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "TurnoverInTree": {
            "$ref": "#/components/schemas/Where.NumericDecimal"
          },
          "UltimateOwnersName": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Where.Text"
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CountryFilter": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ]
          },
          "UpdatedReport": {
            "$ref": "#/components/schemas/Companies.Where.UpdatedReport"
          },
          "USAccountingTemplateForFDICRBC": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "USAccountingTemplateForHeadquarters": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "USPC": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.IdsObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CodeType": {
                        "type": "string"
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Where.TextObject"
                  },
                  {
                    "maxProperties": 1,
                    "minProperties": 0,
                    "type": "object",
                    "properties": {
                      "CodeType": {
                        "type": "string"
                      }
                    },
                    "description": "All properties that can modify some selection"
                  }
                ]
              }
            ],
            "description": "Import all the entity FROM another database"
          },
          "UsSic": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "UsSicSegmentation": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "USStatutory": {
            "$ref": "#/components/schemas/Where.Financials"
          },
          "VadisEstimatedDealValue": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "49",
                    "50",
                    "51",
                    "52",
                    "53",
                    "65",
                    "66",
                    "67",
                    "68",
                    "69",
                    "70"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 49 - A1\r\n* 50 - A2\r\n* 51 - A3\r\n* 52 - A4\r\n* 53 - A5\r\n* 65 - A\r\n* 66 - B\r\n* 67 - C\r\n* 68 - D\r\n* 69 - E\r\n* 70 - F\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "VadisP2BBankrupt2017": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "65",
                    "66",
                    "67",
                    "68",
                    "69",
                    "7",
                    "70",
                    "8",
                    "9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - 1\r\n* 2 - 2\r\n* 3 - 3\r\n* 4 - 4\r\n* 5 - 5\r\n* 6 - 6\r\n* 65 - A\r\n* 66 - B\r\n* 67 - C\r\n* 68 - D\r\n* 69 - E\r\n* 7 - 7\r\n* 70 - F\r\n* 8 - 8\r\n* 9 - 9\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "VadisP2BBankrupt2017Trend": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "65",
                    "66",
                    "67",
                    "68",
                    "69",
                    "7",
                    "70",
                    "8",
                    "9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - 1\r\n* 2 - 2\r\n* 3 - 3\r\n* 4 - 4\r\n* 5 - 5\r\n* 6 - 6\r\n* 65 - A\r\n* 66 - B\r\n* 67 - C\r\n* 68 - D\r\n* 69 - E\r\n* 7 - 7\r\n* 70 - F\r\n* 8 - 8\r\n* 9 - 9\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "VadisP2BSold": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "49",
                    "50",
                    "51",
                    "52",
                    "53",
                    "65",
                    "66",
                    "67",
                    "68",
                    "69",
                    "70"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 49 - A1\r\n* 50 - A2\r\n* 51 - A3\r\n* 52 - A4\r\n* 53 - A5\r\n* 65 - A\r\n* 66 - B\r\n* 67 - C\r\n* 68 - D\r\n* 69 - E\r\n* 70 - F\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "VadisP2BSoldTrend": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "49",
                    "50",
                    "51",
                    "52",
                    "53",
                    "65",
                    "66",
                    "67",
                    "68",
                    "69",
                    "70"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 49 - A1\r\n* 50 - A2\r\n* 51 - A3\r\n* 52 - A4\r\n* 53 - A5\r\n* 65 - A\r\n* 66 - B\r\n* 67 - C\r\n* 68 - D\r\n* 69 - E\r\n* 70 - F\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "ValorDirect": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "WebsiteAddress": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "WIPO": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "WocoMatchEntityCategory": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "WordsWithinNotes": {
            "$ref": "#/components/schemas/Where.FullText"
          },
          "WVBGlobalScore": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - A\r\n* 1 - B+\r\n* 2 - B\r\n* 3 - B-\r\n* 4 - C\r\n* 5 - D\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "WVBGlobalScoreTrend": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - A\r\n* 1 - B+\r\n* 2 - B\r\n* 3 - B-\r\n* 4 - C\r\n* 5 - D\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "WZ2008": {
            "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
          },
          "YearOfIncorporation": {
            "$ref": "#/components/schemas/Where.NumericIntegral"
          },
          "YearsWithAvailableAccounts": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "ZandersAlbatrossScore": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - 1\r\n* 2 - 2\r\n* 3 - 3\r\n* 4 - 4\r\n* 5 - 5\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "ZandersFalconCounterpartyRiskScore": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "10",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - 1\r\n* 10 - 10\r\n* 2 - 2\r\n* 3 - 3\r\n* 4 - 4\r\n* 5 - 5\r\n* 6 - 6\r\n* 7 - 7\r\n* 8 - 8\r\n* 9 - 9\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          },
          "ZandersFalconCounterpartyRiskScoreTrend": {
            "type": "object",
            "properties": {
              "PredefinedScore": {
                "type": "array",
                "items": {
                  "enum": [
                    "1",
                    "10",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1 - 1\r\n* 10 - 10\r\n* 2 - 2\r\n* 3 - 3\r\n* 4 - 4\r\n* 5 - 5\r\n* 6 - 6\r\n* 7 - 7\r\n* 8 - 8\r\n* 9 - 9\r\n"
                }
              },
              "Years": {
                "type": "array",
                "items": {
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015",
                    "2016",
                    "2017",
                    "2018",
                    "2019",
                    "2020",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "year-0",
                    "year-1",
                    "year-2",
                    "year-2011",
                    "year-2012",
                    "year-2013",
                    "year-2014",
                    "year-2015",
                    "year-2016",
                    "year-2017",
                    "year-2018",
                    "year-2019",
                    "year-2020",
                    "year-3",
                    "year-4",
                    "year-5",
                    "year-6",
                    "year-7",
                    "year-8",
                    "year-9"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Last available year\r\n* 1 - Last year -1\r\n* 2 - Last year -2\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n* 2020 - 2020\r\n* 3 - Last year -3\r\n* 4 - Last year -4\r\n* 5 - Last year -5\r\n* 6 - Last year -6\r\n* 7 - Last year -7\r\n* 8 - Last year -8\r\n* 9 - Last year -9\r\n* year-0 - Last available year\r\n* year-1 - Last year -1\r\n* year-2 - Last year -2\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n* year-2020 - 2020\r\n* year-3 - Last year -3\r\n* year-4 - Last year -4\r\n* year-5 - Last year -5\r\n* year-6 - Last year -6\r\n* year-7 - Last year -7\r\n* year-8 - Last year -8\r\n* year-9 - Last year -9\r\n"
                }
              },
              "MostRecentAccount": {
                "enum": [
                  "year-2011",
                  "year-2012",
                  "year-2013",
                  "year-2014",
                  "year-2015",
                  "year-2016",
                  "year-2017",
                  "year-2018",
                  "year-2019"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* year-2011 - 2011\r\n* year-2012 - 2012\r\n* year-2013 - 2013\r\n* year-2014 - 2014\r\n* year-2015 - 2015\r\n* year-2016 - 2016\r\n* year-2017 - 2017\r\n* year-2018 - 2018\r\n* year-2019 - 2019\r\n"
              },
              "YearsCombine": {
                "enum": [
                  "AllYears",
                  "AtLeastOneYear",
                  "BetweenTwoYears",
                  "OldestNewestYears"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllYears - all combinations of 2 consecutive years\r\n* AtLeastOneYear - at least one combination of 2 consecutive years\r\n* BetweenTwoYears - between first and last year selected\r\n* OldestNewestYears - the oldest and the newest out of the selected years\r\n"
              },
              "TrendSigne": {
                "enum": [
                  "healthier",
                  "Negative",
                  "Positive",
                  "riskier",
                  "stable"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* healthier - healthier\r\n* Negative - negative\r\n* Positive - positive\r\n* riskier - riskier\r\n* stable - stable\r\n"
              },
              "From": {
                "type": "integer"
              },
              "To": {
                "type": "integer"
              }
            },
            "description": "Import all the entity FROM another database"
          }
        },
        "description": "The definition of a complex search. There is one unique property possible. Each property correspond to one type of search."
      },
      "Where.Ids": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An id or an array of ids"
          },
          {
            "type": "string",
            "description": "An id or an array of ids"
          }
        ],
        "description": "The identifiers to be matched"
      },
      "Where.Code": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "Ids": {
                "$ref": "#/components/schemas/Where.Ids"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "Text": {
                "$ref": "#/components/schemas/Where.Text"
              }
            }
          }
        ]
      },
      "Where.Text": {
        "oneOf": [
          {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Where.Text"
            },
            "description": "An array of Where.Text associated with a boolean AND operation"
          },
          {
            "$ref": "#/components/schemas/Where.TextExpression"
          },
          {
            "type": "string",
            "description": "\r\nA single string is treated in two way:\r\n1. If the last charter is an asterix(wildcard) \r\n  Then we match every text that **start with** the input\r\n2. No wildcard\r\n  We match only **whole word*\r\n> Note that if the input contains many words separated by **space** we will match that exact phrases\r\n> No case sensitive search is possible"
          }
        ],
        "description": "Define a way to find words/phrases in data"
      },
      "Where.TextExpression": {
        "maxProperties": 1,
        "minProperties": 1,
        "type": "object",
        "properties": {
          "And": {
            "maximum": 6,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Where.Text"
            },
            "description": "boolean operator **and** applied on the array of object. The text will match **all** of the words/sub expression"
          },
          "Or": {
            "maximum": 6,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Where.Text"
            },
            "description": "boolean operator **or** applied on the array of object.The text will match **any** of the words / sub expression"
          },
          "Not": {
            "maximum": 1,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Where.Text"
            },
            "description": "boolean operator **not** applied on the array of object.The text will match **none** of the words/sub expression"
          }
        },
        "description": "Change the logical association between words."
      },
      "Companies.Where.AccountType": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "C1",
                "C2",
                "U1",
                "U2",
                "CAdditional",
                "UAdditional",
                "LF",
                "NF",
                "NRF"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* C1 - C1 (consolidated accounts with no unconsolidated companion)\r\n* C2 - C2 (consolidated accounts with an unconsolidated companion)\r\n* U1 - U1 (unconsolidated accounts with no consolidated companion)\r\n* U2 - U2 (unconsolidated accounts with a consolidated companion)\r\n* CAdditional - Additional consolidated accounts (C*)\r\n* UAdditional - Additional unconsolidated accounts (U*)\r\n* LF - LF (Limited financial)\r\n* NF - NF (No financial variables at all)\r\n* NRF - NRF (No recent financial)\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "C1",
              "C2",
              "U1",
              "U2",
              "CAdditional",
              "UAdditional",
              "LF",
              "NF",
              "NRF"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* C1 - C1 (consolidated accounts with no unconsolidated companion)\r\n* C2 - C2 (consolidated accounts with an unconsolidated companion)\r\n* U1 - U1 (unconsolidated accounts with no consolidated companion)\r\n* U2 - U2 (unconsolidated accounts with a consolidated companion)\r\n* CAdditional - Additional consolidated accounts (C*)\r\n* UAdditional - Additional unconsolidated accounts (U*)\r\n* LF - LF (Limited financial)\r\n* NF - NF (No financial variables at all)\r\n* NRF - NRF (No recent financial)\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "BvDLiveStatus.Where.Status": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "ActiveRoot",
                "Active",
                "ActiveRescuePlan",
                "ActiveDefaultPayment",
                "ActiveReceivership",
                "ActiveReorganization",
                "ActiveDormant",
                "InactiveRoot",
                "InLiquidation",
                "Bankruptcy",
                "DissolvedMerger",
                "DissolvedDemerger",
                "DissolvedLiquidation",
                "DissolvedBankruptcy",
                "Dissolved",
                "InactiveNoPrecision",
                "UnknownSituation",
                "ActiveInDifficulties",
                "ActiveHealty",
                "ActiveForMintGlobal"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* ActiveRoot - Active companies\r\n* Active - Active\r\n* ActiveRescuePlan - Active (rescue plan)\r\n* ActiveDefaultPayment - Active (default of payment)\r\n* ActiveReceivership - Active (insolvency proceedings)\r\n* ActiveReorganization - Active (reorganization)\r\n* ActiveDormant - Active (dormant)\r\n* InactiveRoot - Inactive companies\r\n* InLiquidation - In liquidation\r\n* Bankruptcy - Bankruptcy\r\n* DissolvedMerger - Dissolved (merger or take-over)\r\n* DissolvedDemerger - Dissolved (demerger)\r\n* DissolvedLiquidation - Dissolved (liquidation)\r\n* DissolvedBankruptcy - Dissolved (bankruptcy)\r\n* Dissolved - Dissolved\r\n* InactiveNoPrecision - Inactive (no precision)\r\n* UnknownSituation - Unknown situation\r\n* ActiveInDifficulties - Active in difficulties\r\n* ActiveHealty - Active healty\r\n* ActiveForMintGlobal - Active\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "ActiveRoot",
              "Active",
              "ActiveRescuePlan",
              "ActiveDefaultPayment",
              "ActiveReceivership",
              "ActiveReorganization",
              "ActiveDormant",
              "InactiveRoot",
              "InLiquidation",
              "Bankruptcy",
              "DissolvedMerger",
              "DissolvedDemerger",
              "DissolvedLiquidation",
              "DissolvedBankruptcy",
              "Dissolved",
              "InactiveNoPrecision",
              "UnknownSituation",
              "ActiveInDifficulties",
              "ActiveHealty",
              "ActiveForMintGlobal"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* ActiveRoot - Active companies\r\n* Active - Active\r\n* ActiveRescuePlan - Active (rescue plan)\r\n* ActiveDefaultPayment - Active (default of payment)\r\n* ActiveReceivership - Active (insolvency proceedings)\r\n* ActiveReorganization - Active (reorganization)\r\n* ActiveDormant - Active (dormant)\r\n* InactiveRoot - Inactive companies\r\n* InLiquidation - In liquidation\r\n* Bankruptcy - Bankruptcy\r\n* DissolvedMerger - Dissolved (merger or take-over)\r\n* DissolvedDemerger - Dissolved (demerger)\r\n* DissolvedLiquidation - Dissolved (liquidation)\r\n* DissolvedBankruptcy - Dissolved (bankruptcy)\r\n* Dissolved - Dissolved\r\n* InactiveNoPrecision - Inactive (no precision)\r\n* UnknownSituation - Unknown situation\r\n* ActiveInDifficulties - Active in difficulties\r\n* ActiveHealty - Active healty\r\n* ActiveForMintGlobal - Active\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Where.NumericIntegral": {
        "minProperties": 1,
        "type": "object",
        "properties": {
          "Max": {
            "type": "integer"
          },
          "Min": {
            "type": "integer"
          }
        }
      },
      "PublicTenders.Where.DirectSearch": {
        "type": "string"
      },
      "PublicTendersCompanies.Where.DirectSearch": {
        "type": "string"
      },
      "Companies.Where.CodeCodeType": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/Where.IdsObject"
              },
              {
                "$ref": "#/components/schemas/Companies.Where.CodeType"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/Where.TextObject"
              },
              {
                "$ref": "#/components/schemas/Companies.Where.CodeType"
              }
            ]
          }
        ]
      },
      "Where.IdsObject": {
        "type": "object",
        "properties": {
          "Ids": {
            "$ref": "#/components/schemas/Where.Ids"
          }
        }
      },
      "Companies.Where.CodeType": {
        "maxProperties": 1,
        "minProperties": 0,
        "type": "object",
        "properties": {
          "CodeType": {
            "type": "string"
          }
        },
        "description": "All properties that can modify some selection"
      },
      "Where.TextObject": {
        "type": "object",
        "properties": {
          "Text": {
            "$ref": "#/components/schemas/Where.Text"
          }
        }
      },
      "Companies.Where.ClosingMonthOfLatestAccounts": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* January - January\r\n* February - February\r\n* March - March\r\n* April - April\r\n* May - May\r\n* June - June\r\n* July - July\r\n* August - August\r\n* September - September\r\n* October - October\r\n* November - November\r\n* December - December\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* January - January\r\n* February - February\r\n* March - March\r\n* April - April\r\n* May - May\r\n* June - June\r\n* July - July\r\n* August - August\r\n* September - September\r\n* October - October\r\n* November - November\r\n* December - December\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Companies.Where.CompanyCategory": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "VeryLarge",
                "Large",
                "Medium",
                "Small"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* VeryLarge - Very large\r\n* Large - Large\r\n* Medium - Medium\r\n* Small - Small\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "VeryLarge",
              "Large",
              "Medium",
              "Small"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* VeryLarge - Very large\r\n* Large - Large\r\n* Medium - Medium\r\n* Small - Small\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Companies.Where.Quick": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string"
          },
          {
            "$ref": "#/components/schemas/Companies.Where.QuickObject"
          }
        ],
        "description": "A object with quick criteria"
      },
      "Companies.Where.QuickObject": {
        "required": [
          "Text"
        ],
        "type": "object",
        "properties": {
          "Text": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "FirstWord": {
            "type": "boolean"
          },
          "WholeWord": {
            "type": "boolean"
          }
        }
      },
      "Where.CorteraMatrixSearch": {
        "type": "object",
        "properties": {
          "Min": {
            "type": "number",
            "format": "double"
          },
          "Max": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Where.Financials": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "Field": {
                "type": "string"
              }
            }
          },
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "Value": {
                    "$ref": "#/components/schemas/Where.Financials.Range"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "GrowthRate": {
                    "$ref": "#/components/schemas/Where.Financials.Range"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "DecreasingRate": {
                    "$ref": "#/components/schemas/Where.Financials.Range"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "Top": {
                    "$ref": "#/components/schemas/Companies.Where.Financials.Top"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "Trend": {
                    "enum": [
                      "Positive",
                      "Negative"
                    ],
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "AllCompaniesWithAKnownValue": {
                    "enum": [
                      true
                    ],
                    "type": "boolean"
                  }
                }
              }
            ]
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Companies.Where.Periods.AbsoluteYears"
              },
              {
                "$ref": "#/components/schemas/Companies.Where.Periods.RelativeYears"
              },
              {
                "$ref": "#/components/schemas/Companies.Where.Periods.AbsoluteQuarters"
              },
              {
                "$ref": "#/components/schemas/Companies.Where.Periods.RelativeQuarters"
              }
            ],
            "description": "Define the periods for the value search"
          },
          {
            "type": "object",
            "properties": {
              "Combine": {
                "enum": [
                  "All",
                  "AtLeastOne",
                  "BetweenBoundaries"
                ],
                "type": "string",
                "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* All - All selected periods\r\n* AtLeastOne - At least one of the selected periods\r\n* BetweenBoundaries - Between the two selected periods\r\n"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "Currency": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "IncludeEstimate": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "Where.Financials.Range": {
        "type": "object",
        "properties": {
          "Min": {
            "type": "number",
            "format": "double"
          },
          "Max": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Companies.Where.Financials.Top": {
        "oneOf": [
          {
            "type": "integer"
          },
          {
            "enum": [
              "FirstQuartile",
              "FourthQuartile",
              "SecondQuartile",
              "ThirdQuartile"
            ],
            "type": "string",
            "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* FirstQuartile - Lower quartile\r\n* FourthQuartile - Upper quartile\r\n* SecondQuartile - Second quartile\r\n* ThirdQuartile - Third quartile\r\n"
          }
        ]
      },
      "Companies.Where.Periods.AbsoluteYears": {
        "type": "object",
        "properties": {
          "AbsoluteYears": {
            "type": "array",
            "items": {
              "enum": [
                "2010",
                "2011",
                "2012",
                "2013",
                "2014",
                "2015",
                "2016",
                "2017",
                "2018",
                "2019"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 2010 - 2010\r\n* 2011 - 2011\r\n* 2012 - 2012\r\n* 2013 - 2013\r\n* 2014 - 2014\r\n* 2015 - 2015\r\n* 2016 - 2016\r\n* 2017 - 2017\r\n* 2018 - 2018\r\n* 2019 - 2019\r\n"
            }
          }
        }
      },
      "Companies.Where.Periods.RelativeYears": {
        "type": "object",
        "properties": {
          "RelativeYears": {
            "type": "array",
            "items": {
              "enum": [
                "LY",
                "LY-1",
                "LY-2",
                "LY-3",
                "LY-4",
                "LY-5",
                "LY-6",
                "LY-7",
                "LY-8",
                "LY-9"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* LY - Last available year\r\n* LY-1 - Last year -1\r\n* LY-2 - Last year -2\r\n* LY-3 - Last year -3\r\n* LY-4 - Last year -4\r\n* LY-5 - Last year -5\r\n* LY-6 - Last year -6\r\n* LY-7 - Last year -7\r\n* LY-8 - Last year -8\r\n* LY-9 - Last year -9\r\n"
            }
          }
        }
      },
      "Companies.Where.Periods.AbsoluteQuarters": {
        "type": "object",
        "properties": {
          "AbsoluteQuarters": {
            "type": "array",
            "items": {
              "enum": [
                "2017Q2",
                "2017Q3",
                "2017Q4",
                "2018Q1",
                "2018Q2",
                "2018Q3",
                "2018Q4",
                "2019Q1",
                "2019Q2",
                "2019Q3",
                "2019Q4",
                "2020Q1"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 2017Q2 - 2017 Q2\r\n* 2017Q3 - 2017 Q3\r\n* 2017Q4 - 2017 Q4\r\n* 2018Q1 - 2018 Q1\r\n* 2018Q2 - 2018 Q2\r\n* 2018Q3 - 2018 Q3\r\n* 2018Q4 - 2018 Q4\r\n* 2019Q1 - 2019 Q1\r\n* 2019Q2 - 2019 Q2\r\n* 2019Q3 - 2019 Q3\r\n* 2019Q4 - 2019 Q4\r\n* 2020Q1 - 2020 Q1\r\n"
            }
          }
        }
      },
      "Companies.Where.Periods.RelativeQuarters": {
        "type": "object",
        "properties": {
          "RelativeQuarters": {
            "type": "array",
            "items": {
              "enum": [
                "LQ",
                "LQ-1",
                "LQ-10",
                "LQ-11",
                "LQ-2",
                "LQ-3",
                "LQ-4",
                "LQ-5",
                "LQ-6",
                "LQ-7",
                "LQ-8",
                "LQ-9"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* LQ - Last available quarter\r\n* LQ-1 - Last available quarter - 1\r\n* LQ-10 - Last available quarter - 10\r\n* LQ-11 - Last available quarter - 11\r\n* LQ-2 - Last available quarter - 2\r\n* LQ-3 - Last available quarter - 3\r\n* LQ-4 - Last available quarter - 4\r\n* LQ-5 - Last available quarter - 5\r\n* LQ-6 - Last available quarter - 6\r\n* LQ-7 - Last available quarter - 7\r\n* LQ-8 - Last available quarter - 8\r\n* LQ-9 - Last available quarter - 9\r\n"
            }
          }
        }
      },
      "Companies.Where.FiveYearsRating": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "AAA",
                "AA",
                "A",
                "BBB",
                "BB",
                "B",
                "CCC",
                "CC",
                "C",
                "D",
                "NR"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AAA - AAA\r\n* AA - AA\r\n* A - A\r\n* BBB - BBB\r\n* BB - BB\r\n* B - B\r\n* CCC - CCC\r\n* CC - CC\r\n* C - C\r\n* D - D\r\n* NR - NR\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "AAA",
              "AA",
              "A",
              "BBB",
              "BB",
              "B",
              "CCC",
              "CC",
              "C",
              "D",
              "NR"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* AAA - AAA\r\n* AA - AA\r\n* A - A\r\n* BBB - BBB\r\n* BB - BB\r\n* B - B\r\n* CCC - CCC\r\n* CC - CC\r\n* C - C\r\n* D - D\r\n* NR - NR\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Contacts.Where": {
        "oneOf": [
          {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contacts.Where"
            },
            "description": "An array of Contacts.Where associated with a boolean AND operation"
          },
          {
            "$ref": "#/components/schemas/Contacts.WhereObject"
          },
          {
            "type": "string",
            "description": "Simple string as criteria name. All records with such a criteria are selected"
          }
        ],
        "description": "Define a way to filter/search records *where* some specified criteria matched some specified values"
      },
      "Contacts.WhereObject": {
        "maxProperties": 1,
        "minProperties": 1,
        "type": "object",
        "properties": {
          "And": {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contacts.Where"
            },
            "description": "boolean operator AND applied on the array of object"
          },
          "Or": {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contacts.Where"
            }
          },
          "Not": {
            "maximum": 1,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contacts.Where"
            }
          },
          "RecordSet": {
            "type": "string",
            "description": "Use a selection from the /Store/Recordsets identified by its .Id"
          },
          "DirectSelection": {
            "type": "string"
          },
          "AdvisorLocationLookup": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "AdvisorName": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "Age": {
            "$ref": "#/components/schemas/Where.NumericDecimal"
          },
          "AllAuditors": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "AndDirectorsPositions": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "AppointmentDate": {
            "$ref": "#/components/schemas/Where.NumericDateRelative"
          },
          "AuditorName": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "AuditorNameDirect": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "AuditorsAppointmentDate": {
            "$ref": "#/components/schemas/Where.NumericDateRelative"
          },
          "BirthDate": {
            "$ref": "#/components/schemas/Where.NumericDateRelative"
          },
          "CareOfMailingContact": {
            "$ref": "#/components/schemas/Contacts.Where.CareOfMailingContact"
          },
          "CurrentDirectorship": {
            "$ref": "#/components/schemas/Contacts.Where.CurrentDirectorship"
          },
          "CurrentPreviousDirectorship": {
            "$ref": "#/components/schemas/Contacts.Where.CurrentPreviousDirectorship"
          },
          "DirectorName": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "Disqualifications": {
            "$ref": "#/components/schemas/Contacts.Where.Disqualifications"
          },
          "EmailAddress": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "EmailAddressDirect": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "EmailMailingContact": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "FromCompanies": {
            "$ref": "#/components/schemas/Companies.Where"
          },
          "Gender": {
            "$ref": "#/components/schemas/Contacts.Where.Gender"
          },
          "HydraAdvisorHomeCountryISO": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "HydraHomeCountryISO": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "HydraMultipleNationalitiesCode": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "ID": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "ID4Reload": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "ItalianIdDirect": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "KeepOnlySomePositions": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "LocationLookup": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "Match": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Contacts.Where.Match"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Contacts.Where.Match"
                },
                "description": "All the matches are executed and the results are joined with a logical OR operator"
              }
            ]
          },
          "MiscMembership": {
            "$ref": "#/components/schemas/Contacts.Where.MiscMembership"
          },
          "NaFiltersSearch": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "NameDirect": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "NameDirect4Companies": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "NameLookup": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "NameLookup4Companies": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "Nationality": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "NationalityDirect": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "NationalityLookup": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "NewContactID": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "OfficialIndividualID4Reload": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "OriginalFunctionDirect": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "OriginalFunctionLookup": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "PhoneMailingContact": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "PhoneNumber": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "PhoneTPSMailingContact": {
            "$ref": "#/components/schemas/Contacts.Where.PhoneTPSMailingContact"
          },
          "Position": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "PositionFall2009": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "PositionFall2009Lookup4Companies": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "PositionLookup": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "PositionShareHolder": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "PositionShareHolderFall2009": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "QuickSearch": {
            "$ref": "#/components/schemas/Where.FullText"
          },
          "ResignationDate": {
            "$ref": "#/components/schemas/Where.NumericDateRelative"
          },
          "Source": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "Type": {
            "$ref": "#/components/schemas/Contacts.Where.Type"
          },
          "TypeAndGender": {
            "$ref": "#/components/schemas/Contacts.Where.TypeAndGender"
          },
          "WhoAreShareHolders": {
            "$ref": "#/components/schemas/Contacts.Where.WhoAreShareHolders"
          },
          "WordsWithinNotes": {
            "$ref": "#/components/schemas/Where.FullText"
          },
          "WorkAddressDirect": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "WorkAddressSelection": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "WorkAddressStatus": {
            "$ref": "#/components/schemas/Contacts.Where.WorkAddressStatus"
          },
          "WorkUKContactsAndDirectorsPositions": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "WorkUKGovernmentRegion": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "WorkUKGovernmentRegionIndustry": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "WorkUKNUTSRegion": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "WorkUKNUTSRegionIndustry": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "WorkUKPostalRegion": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "WorkUKPostalRegionIndustry": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "WorkUKPostCode": {
            "$ref": "#/components/schemas/Where.Ids"
          }
        },
        "description": "The definition of a complex search. There is one unique property possible. Each property correspond to one type of search."
      },
      "Where.NumericDecimal": {
        "minProperties": 1,
        "type": "object",
        "properties": {
          "Max": {
            "type": "number",
            "format": "double"
          },
          "Min": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Where.NumericDateRelative": {
        "minProperties": 1,
        "type": "object",
        "properties": {
          "To": {
            "type": "string",
            "format": "date"
          },
          "From": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Contacts.Where.CareOfMailingContact": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "CareOf",
                "NoCareOf"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* CareOf - c/o\r\n* NoCareOf - No c/o\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "CareOf",
              "NoCareOf"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* CareOf - c/o\r\n* NoCareOf - No c/o\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Contacts.Where.CurrentDirectorship": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "Current",
                "Previous",
                "PreviousAndShareHolder"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Current - Current positions\r\n* Previous - previous directorships\r\n* PreviousAndShareHolder - previous shareholder directorships\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "Current",
              "Previous",
              "PreviousAndShareHolder"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* Current - Current positions\r\n* Previous - previous directorships\r\n* PreviousAndShareHolder - previous shareholder directorships\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Contacts.Where.CurrentPreviousDirectorship": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "Current",
                "CurrentPrevious"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Current - Current roles only\r\n* CurrentPrevious - Current and previous roles\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "Current",
              "CurrentPrevious"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* Current - Current roles only\r\n* CurrentPrevious - Current and previous roles\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Contacts.Where.Disqualifications": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "Disqualified"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Disqualified - Disqualified directors from any company\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "Disqualified"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* Disqualified - Disqualified directors from any company\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Contacts.Where.Gender": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "Male",
                "Female",
                "Unknown"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Male - Male\r\n* Female - Female\r\n* Unknown - Unspecified\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "Male",
              "Female",
              "Unknown"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* Male - Male\r\n* Female - Female\r\n* Unknown - Unspecified\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Contacts.Where.Match": {
        "required": [
          "Criteria"
        ],
        "type": "object",
        "properties": {
          "Criteria": {
            "type": "object",
            "properties": {
              "Name": {
                "type": "string"
              },
              "City": {
                "type": "string"
              },
              "Country": {
                "type": "string"
              },
              "Address": {
                "type": "string"
              },
              "EMailOrWebsite": {
                "type": "string"
              },
              "NationalId": {
                "type": "string"
              },
              "PhoneOrFax": {
                "type": "string"
              },
              "PostCode": {
                "type": "string"
              },
              "State": {
                "type": "string"
              },
              "Ticker": {
                "type": "string"
              },
              "Isin": {
                "type": "string"
              },
              "BvD9": {
                "type": "string"
              }
            }
          },
          "Options": {
            "type": "object",
            "properties": {
              "ScoreLimit": {
                "type": "number",
                "format": "double"
              },
              "ExclusionFlags": {
                "type": "array",
                "items": {
                  "enum": [
                    "None",
                    "ExcludeVeryLargeCompanies",
                    "ExcludeLargeCompanies",
                    "ExcludeMediumCompanies",
                    "ExcludeSmallCompanies",
                    "ExcludePreviousNames",
                    "ExcludeBranchLocations",
                    "ExcludeHistorical",
                    "ExcludeInactive",
                    "ExcludeUnlisted"
                  ],
                  "type": "string"
                }
              },
              "SelectionMode": {
                "enum": [
                  "Normal",
                  "Strict"
                ],
                "type": "string"
              },
              "CustomRules": {
                "type": "string"
              }
            }
          }
        }
      },
      "Contacts.Where.MiscMembership": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "AllContact4ForMailing"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllContact4ForMailing - All contacts\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "AllContact4ForMailing"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* AllContact4ForMailing - All contacts\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Contacts.Where.PhoneTPSMailingContact": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "CTPS",
                "NO_CTPS"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* CTPS - CTPS\r\n* NO_CTPS - NO_CTPS\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "CTPS",
              "NO_CTPS"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* CTPS - CTPS\r\n* NO_CTPS - NO_CTPS\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Where.FullText": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of words by default treated like AllWords"
          },
          {
            "type": "string",
            "description": "An array of words by default treated like AllWords"
          },
          {
            "$ref": "#/components/schemas/Where.FullTextObject"
          }
        ]
      },
      "Where.FullTextObject": {
        "type": "object",
        "properties": {
          "AllWords": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "Each words must be present in the record"
          },
          "NoWords": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "None of the words can be present in the record"
          },
          "AnyWords": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "At least one of the words can be present in the record"
          },
          "Phrases": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "The complete(entire) phrases must be present in the record"
          }
        }
      },
      "Contacts.Where.Type": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "Individual",
                "Company"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Individual - Individual\r\n* Company - Company\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "Individual",
              "Company"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* Individual - Individual\r\n* Company - Company\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Contacts.Where.TypeAndGender": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "Corporate",
                "Individual",
                "Male",
                "Female",
                "NotSpecified"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Corporate - Corporate\r\n* Individual - Individual\r\n* Male - Male\r\n* Female - Female\r\n* NotSpecified - Not specified\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "Corporate",
              "Individual",
              "Male",
              "Female",
              "NotSpecified"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* Corporate - Corporate\r\n* Individual - Individual\r\n* Male - Male\r\n* Female - Female\r\n* NotSpecified - Not specified\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Contacts.Where.WhoAreShareHolders": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "IsShareholder"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* IsShareholder - Is shareholder\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "IsShareholder"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* IsShareholder - Is shareholder\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Contacts.Where.WorkAddressStatus": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "NotCareOf",
                "NotCTPS"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* NotCareOf - Exclude C/O\r\n* NotCTPS - Eclude CTPS\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "NotCareOf",
              "NotCTPS"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* NotCareOf - Exclude C/O\r\n* NotCTPS - Eclude CTPS\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Funds.Where": {
        "oneOf": [
          {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Funds.Where"
            },
            "description": "An array of Funds.Where associated with a boolean AND operation"
          },
          {
            "$ref": "#/components/schemas/Funds.WhereObject"
          },
          {
            "enum": [
              "AllFunds"
            ],
            "type": "string",
            "description": "Simple string as criteria name. All records with such a criteria are selected"
          }
        ],
        "description": "Define a way to filter/search records *where* some specified criteria matched some specified values"
      },
      "Funds.WhereObject": {
        "maxProperties": 1,
        "minProperties": 1,
        "type": "object",
        "properties": {
          "And": {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Funds.Where"
            },
            "description": "boolean operator AND applied on the array of object"
          },
          "Or": {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Funds.Where"
            }
          },
          "Not": {
            "maximum": 1,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Funds.Where"
            }
          },
          "RecordSet": {
            "type": "string",
            "description": "Use a selection from the /Store/Recordsets identified by its .Id"
          },
          "DirectSelection": {
            "enum": [
              "AllFunds"
            ],
            "type": "string"
          },
          "BvDId": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "FromCompanies": {
            "$ref": "#/components/schemas/Companies.Where"
          },
          "FromShareClasses": {
            "$ref": "#/components/schemas/ShareClasses.Where"
          },
          "FundId": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "InceptionDate": {
            "$ref": "#/components/schemas/Where.NumericDateRelative"
          },
          "LegalName": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "Name": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "NetAssetsLastValue": {
            "$ref": "#/components/schemas/Where.NumericDecimal"
          }
        },
        "description": "The definition of a complex search. There is one unique property possible. Each property correspond to one type of search."
      },
      "ShareClasses.Where": {
        "oneOf": [
          {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShareClasses.Where"
            },
            "description": "An array of ShareClasses.Where associated with a boolean AND operation"
          },
          {
            "$ref": "#/components/schemas/ShareClasses.WhereObject"
          },
          {
            "enum": [
              "AllShareClasses"
            ],
            "type": "string",
            "description": "Simple string as criteria name. All records with such a criteria are selected"
          }
        ],
        "description": "Define a way to filter/search records *where* some specified criteria matched some specified values"
      },
      "ShareClasses.WhereObject": {
        "maxProperties": 1,
        "minProperties": 1,
        "type": "object",
        "properties": {
          "And": {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShareClasses.Where"
            },
            "description": "boolean operator AND applied on the array of object"
          },
          "Or": {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShareClasses.Where"
            }
          },
          "Not": {
            "maximum": 1,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShareClasses.Where"
            }
          },
          "RecordSet": {
            "type": "string",
            "description": "Use a selection from the /Store/Recordsets identified by its .Id"
          },
          "DirectSelection": {
            "enum": [
              "AllShareClasses"
            ],
            "type": "string"
          },
          "ISIN": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "LegalName": {
            "$ref": "#/components/schemas/Where.Text"
          },
          "ShareClassId": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "Status": {
            "$ref": "#/components/schemas/Where.Ids"
          }
        },
        "description": "The definition of a complex search. There is one unique property possible. Each property correspond to one type of search."
      },
      "Companies.Where.ImpliedRating": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "AAA",
                "AA",
                "A",
                "BBB",
                "BB",
                "B",
                "CCC",
                "CC",
                "C",
                "D",
                "NR"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AAA - AAA\r\n* AA - AA\r\n* A - A\r\n* BBB - BBB\r\n* BB - BB\r\n* B - B\r\n* CCC - CCC\r\n* CC - CC\r\n* C - C\r\n* D - D\r\n* NR - NR\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "AAA",
              "AA",
              "A",
              "BBB",
              "BB",
              "B",
              "CCC",
              "CC",
              "C",
              "D",
              "NR"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* AAA - AAA\r\n* AA - AA\r\n* A - A\r\n* BBB - BBB\r\n* BB - BB\r\n* B - B\r\n* CCC - CCC\r\n* CC - CC\r\n* C - C\r\n* D - D\r\n* NR - NR\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Companies.Where.IndependenceIndicator": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "A+",
                "A",
                "A-",
                "B+",
                "B",
                "B-",
                "C+",
                "C",
                "D",
                "U",
                "Listed",
                "Shareholders",
                "Unknown",
                "DirectOwnership"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* A+ - A+\r\n* A - A\r\n* A- - A-\r\n* B+ - B+\r\n* B - B\r\n* B- - B-\r\n* C+ - C+\r\n* C - C\r\n* D - D\r\n* U - U\r\n* Listed - Add all publicly listed companies\r\n* Shareholders - Add companies for which all shareholders or all shareholders with a stake greater than 25% are individuals or employees\r\n* Unknown - n.a.\r\n* DirectOwnership - Direct majority ownership\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "A+",
              "A",
              "A-",
              "B+",
              "B",
              "B-",
              "C+",
              "C",
              "D",
              "U",
              "Listed",
              "Shareholders",
              "Unknown",
              "DirectOwnership"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* A+ - A+\r\n* A - A\r\n* A- - A-\r\n* B+ - B+\r\n* B - B\r\n* B- - B-\r\n* C+ - C+\r\n* C - C\r\n* D - D\r\n* U - U\r\n* Listed - Add all publicly listed companies\r\n* Shareholders - Add companies for which all shareholders or all shareholders with a stake greater than 25% are individuals or employees\r\n* Unknown - n.a.\r\n* DirectOwnership - Direct majority ownership\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "MADealType.Where.ZephyrDeals": {
        "type": "object",
        "properties": {
          "FUSACImportParam": {
            "type": "array",
            "items": {
              "enum": [
                "Advisor",
                "Bidder",
                "EquityProvider",
                "Target",
                "Vendor"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Advisor - Advisor\r\n* Bidder - Acquiror\r\n* EquityProvider - Equity Provider\r\n* Target - Target\r\n* Vendor - Vendor\r\n"
            }
          },
          "DivestingShareholdersNote157": {
            "type": "boolean"
          },
          "MADealsDate": {
            "type": "array",
            "items": {
              "enum": [
                "Announced",
                "Completed",
                "PENDING",
                "POSTPONED",
                "Rumoured",
                "UNCONDITIONAL",
                "WITHDRAWN"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Announced - Announced\r\n* Completed - Completed\r\n* PENDING - Pending\r\n* POSTPONED - Postponed\r\n* Rumoured - Rumoured\r\n* UNCONDITIONAL - Unconditional\r\n* WITHDRAWN - Withdrawn\r\n"
            }
          },
          "DealType": {
            "type": "array",
            "items": {
              "enum": [
                "ACQUISITION",
                "CAPITAL_INCREASE",
                "DEMERGER",
                "INITIAL_PUBLIC_OFFERING",
                "INSTITUTIONAL_BUY_OUT",
                "JOINT_VENTURE",
                "MANAGEMENT_BUY_IN",
                "MANAGEMENT_BUY_OUT",
                "MERGER",
                "MINORITY_STAKE",
                "PLANNED_IPO",
                "PRIVATE_EQUITY",
                "SHARE_BUY_BACK",
                "VENTURE_CAPITAL"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* ACQUISITION - Acquisition\r\n* CAPITAL_INCREASE - Capital increase\r\n* DEMERGER - Demerger\r\n* INITIAL_PUBLIC_OFFERING - Initial public offering (IPO)\r\n* INSTITUTIONAL_BUY_OUT - Institutional buy-out\r\n* JOINT_VENTURE - Joint-venture\r\n* MANAGEMENT_BUY_IN - Management buy-in\r\n* MANAGEMENT_BUY_OUT - Management buy-out\r\n* MERGER - Merger\r\n* MINORITY_STAKE - Minority stake\r\n* PLANNED_IPO - Planned IPO\r\n* PRIVATE_EQUITY - Private Equity\r\n* SHARE_BUY_BACK - Share buy back\r\n* VENTURE_CAPITAL - Venture Capital\r\n"
            }
          },
          "FUSACMADealsPeriod": {
            "type": "array",
            "items": {
              "enum": [
                "-2011",
                "-20110000",
                "-2012",
                "-20120000",
                "-2013",
                "-20130000",
                "-2014",
                "-20140000",
                "-2015",
                "-20150000",
                "-2016",
                "-20160000",
                "-2017",
                "-20170000",
                "-2018",
                "-20180000",
                "-2019",
                "-20190000",
                "-2020",
                "-20200000",
                "0",
                "1",
                "100",
                "10000",
                "14",
                "20000",
                "3",
                "300",
                "30000",
                "600",
                "7"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* -2011 - 2011\r\n* -20110000 - 2011 - Until current date\r\n* -2012 - 2012\r\n* -20120000 - 2012 - Until current date\r\n* -2013 - 2013\r\n* -20130000 - 2013 - Until current date\r\n* -2014 - 2014\r\n* -20140000 - 2014 - Until current date\r\n* -2015 - 2015\r\n* -20150000 - 2015 - Until current date\r\n* -2016 - 2016\r\n* -20160000 - 2016 - Until current date\r\n* -2017 - 2017\r\n* -20170000 - 2017 - Until current date\r\n* -2018 - 2018\r\n* -20180000 - 2018 - Until current date\r\n* -2019 - 2019\r\n* -20190000 - 2019 - Until current date\r\n* -2020 - 2020\r\n* -20200000 - 2020 - Until current date\r\n* 0 - Any\r\n* 1 - Yesterday\r\n* 100 - Last month\r\n* 10000 - Last year\r\n* 14 - Last 2 weeks\r\n* 20000 - Last 2 years\r\n* 3 - Last 3 days\r\n* 300 - Last 3 months\r\n* 30000 - Last 3 years\r\n* 600 - Last 6 months\r\n* 7 - Last week\r\n"
            }
          },
          "DateChoiceParameter": {
            "type": "string"
          },
          "MADealsDateFrom": {
            "type": "string",
            "format": "date"
          },
          "MADealsDateTo": {
            "type": "string",
            "format": "date"
          },
          "FUSACMADealsValueType": {
            "type": "array",
            "items": {
              "enum": [
                "9011",
                "9540",
                "9594",
                "9686"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 9011 - Equity value\r\n* 9540 - Enterprise value\r\n* 9594 - Estimated enterprise value\r\n* 9686 - All deal values\r\n"
            }
          },
          "MinimumDealValue": {
            "type": "number",
            "format": "double"
          },
          "MaximumDealValue": {
            "type": "number",
            "format": "double"
          },
          "Currency": {
            "type": "string"
          },
          "FUSACMADealsMultipleValueType": {
            "type": "array",
            "items": {
              "enum": [
                "9939",
                "9940",
                "9941",
                "9943",
                "9944",
                "9946",
                "9947"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 9939 - Revenue\r\n* 9940 - Pre-tax profit\r\n* 9941 - Share-holders funds\r\n* 9943 - EBIT\r\n* 9944 - EBITDA\r\n* 9946 - Total assets\r\n* 9947 - Profit after tax\r\n"
            }
          },
          "MinimumDealMultiple": {
            "type": "number",
            "format": "double"
          },
          "MaximumDealMultiple": {
            "type": "number",
            "format": "double"
          },
          "MADealsStatus": {
            "type": "array",
            "items": {
              "enum": [
                "Announced",
                "Completed",
                "PENDING",
                "POSTPONED",
                "Rumoured",
                "UNCONDITIONAL",
                "WITHDRAWN"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Announced - Announced\r\n* Completed - Completed\r\n* PENDING - Pending\r\n* POSTPONED - Postponed\r\n* Rumoured - Rumoured\r\n* UNCONDITIONAL - Unconditional\r\n* WITHDRAWN - Withdrawn\r\n"
            }
          }
        }
      },
      "Companies.Where.Match": {
        "required": [
          "Criteria"
        ],
        "type": "object",
        "properties": {
          "Criteria": {
            "type": "object",
            "properties": {
              "Name": {
                "type": "string"
              },
              "City": {
                "type": "string"
              },
              "Country": {
                "type": "string"
              },
              "Address": {
                "type": "string"
              },
              "EMailOrWebsite": {
                "type": "string"
              },
              "NationalId": {
                "type": "string"
              },
              "PhoneOrFax": {
                "type": "string"
              },
              "PostCode": {
                "type": "string"
              },
              "State": {
                "type": "string"
              },
              "Ticker": {
                "type": "string"
              },
              "Isin": {
                "type": "string"
              },
              "BvD9": {
                "type": "string"
              }
            }
          },
          "Options": {
            "type": "object",
            "properties": {
              "ScoreLimit": {
                "type": "number",
                "format": "double"
              },
              "ExclusionFlags": {
                "type": "array",
                "items": {
                  "enum": [
                    "None",
                    "ExcludeVeryLargeCompanies",
                    "ExcludeLargeCompanies",
                    "ExcludeMediumCompanies",
                    "ExcludeSmallCompanies",
                    "ExcludePreviousNames",
                    "ExcludeBranchLocations",
                    "ExcludeHistorical",
                    "ExcludeInactive",
                    "ExcludeUnlisted"
                  ],
                  "type": "string"
                }
              },
              "SelectionMode": {
                "enum": [
                  "Normal",
                  "Strict"
                ],
                "type": "string"
              },
              "CustomRules": {
                "type": "string"
              }
            }
          }
        }
      },
      "NewDivestingShareholders.Where.ZephyrDeals": {
        "type": "object",
        "properties": {
          "FUSACImportParam": {
            "type": "array",
            "items": {
              "enum": [
                "Advisor",
                "Bidder",
                "EquityProvider",
                "Target",
                "Vendor"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Advisor - Advisor\r\n* Bidder - Acquiror\r\n* EquityProvider - Equity Provider\r\n* Target - Target\r\n* Vendor - Vendor\r\n"
            }
          },
          "DivestingShareholdersNote157": {
            "type": "boolean"
          },
          "MADealsDate": {
            "type": "array",
            "items": {
              "enum": [
                "Announced",
                "Completed",
                "PENDING",
                "POSTPONED",
                "Rumoured",
                "UNCONDITIONAL",
                "WITHDRAWN"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Announced - Announced\r\n* Completed - Completed\r\n* PENDING - Pending\r\n* POSTPONED - Postponed\r\n* Rumoured - Rumoured\r\n* UNCONDITIONAL - Unconditional\r\n* WITHDRAWN - Withdrawn\r\n"
            }
          },
          "DealType": {
            "type": "array",
            "items": {
              "enum": [
                "ACQUISITION",
                "CAPITAL_INCREASE",
                "DEMERGER",
                "INITIAL_PUBLIC_OFFERING",
                "INSTITUTIONAL_BUY_OUT",
                "JOINT_VENTURE",
                "MANAGEMENT_BUY_IN",
                "MANAGEMENT_BUY_OUT",
                "MERGER",
                "MINORITY_STAKE",
                "PLANNED_IPO",
                "PRIVATE_EQUITY",
                "SHARE_BUY_BACK",
                "VENTURE_CAPITAL"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* ACQUISITION - Acquisition\r\n* CAPITAL_INCREASE - Capital increase\r\n* DEMERGER - Demerger\r\n* INITIAL_PUBLIC_OFFERING - Initial public offering (IPO)\r\n* INSTITUTIONAL_BUY_OUT - Institutional buy-out\r\n* JOINT_VENTURE - Joint-venture\r\n* MANAGEMENT_BUY_IN - Management buy-in\r\n* MANAGEMENT_BUY_OUT - Management buy-out\r\n* MERGER - Merger\r\n* MINORITY_STAKE - Minority stake\r\n* PLANNED_IPO - Planned IPO\r\n* PRIVATE_EQUITY - Private Equity\r\n* SHARE_BUY_BACK - Share buy back\r\n* VENTURE_CAPITAL - Venture Capital\r\n"
            }
          },
          "FUSACMADealsPeriod": {
            "type": "array",
            "items": {
              "enum": [
                "-2011",
                "-20110000",
                "-2012",
                "-20120000",
                "-2013",
                "-20130000",
                "-2014",
                "-20140000",
                "-2015",
                "-20150000",
                "-2016",
                "-20160000",
                "-2017",
                "-20170000",
                "-2018",
                "-20180000",
                "-2019",
                "-20190000",
                "-2020",
                "-20200000",
                "0",
                "1",
                "100",
                "10000",
                "14",
                "20000",
                "3",
                "300",
                "30000",
                "600",
                "7"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* -2011 - 2011\r\n* -20110000 - 2011 - Until current date\r\n* -2012 - 2012\r\n* -20120000 - 2012 - Until current date\r\n* -2013 - 2013\r\n* -20130000 - 2013 - Until current date\r\n* -2014 - 2014\r\n* -20140000 - 2014 - Until current date\r\n* -2015 - 2015\r\n* -20150000 - 2015 - Until current date\r\n* -2016 - 2016\r\n* -20160000 - 2016 - Until current date\r\n* -2017 - 2017\r\n* -20170000 - 2017 - Until current date\r\n* -2018 - 2018\r\n* -20180000 - 2018 - Until current date\r\n* -2019 - 2019\r\n* -20190000 - 2019 - Until current date\r\n* -2020 - 2020\r\n* -20200000 - 2020 - Until current date\r\n* 0 - Any\r\n* 1 - Yesterday\r\n* 100 - Last month\r\n* 10000 - Last year\r\n* 14 - Last 2 weeks\r\n* 20000 - Last 2 years\r\n* 3 - Last 3 days\r\n* 300 - Last 3 months\r\n* 30000 - Last 3 years\r\n* 600 - Last 6 months\r\n* 7 - Last week\r\n"
            }
          },
          "DateChoiceParameter": {
            "type": "string"
          },
          "MADealsDateFrom": {
            "type": "string",
            "format": "date"
          },
          "MADealsDateTo": {
            "type": "string",
            "format": "date"
          },
          "FUSACMADealsValueType": {
            "type": "array",
            "items": {
              "enum": [
                "9011",
                "9540",
                "9594",
                "9686"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 9011 - Equity value\r\n* 9540 - Enterprise value\r\n* 9594 - Estimated enterprise value\r\n* 9686 - All deal values\r\n"
            }
          },
          "MinimumDealValue": {
            "type": "number",
            "format": "double"
          },
          "MaximumDealValue": {
            "type": "number",
            "format": "double"
          },
          "Currency": {
            "type": "string"
          },
          "FUSACMADealsMultipleValueType": {
            "type": "array",
            "items": {
              "enum": [
                "9939",
                "9940",
                "9941",
                "9943",
                "9944",
                "9946",
                "9947"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 9939 - Revenue\r\n* 9940 - Pre-tax profit\r\n* 9941 - Share-holders funds\r\n* 9943 - EBIT\r\n* 9944 - EBITDA\r\n* 9946 - Total assets\r\n* 9947 - Profit after tax\r\n"
            }
          },
          "MinimumDealMultiple": {
            "type": "number",
            "format": "double"
          },
          "MaximumDealMultiple": {
            "type": "number",
            "format": "double"
          },
          "MADealsStatus": {
            "type": "array",
            "items": {
              "enum": [
                "Announced",
                "Completed",
                "PENDING",
                "POSTPONED",
                "Rumoured",
                "UNCONDITIONAL",
                "WITHDRAWN"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Announced - Announced\r\n* Completed - Completed\r\n* PENDING - Pending\r\n* POSTPONED - Postponed\r\n* Rumoured - Rumoured\r\n* UNCONDITIONAL - Unconditional\r\n* WITHDRAWN - Withdrawn\r\n"
            }
          }
        }
      },
      "Companies.Where.NumberOfYearsWithAccounts": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "OneYear",
                "TwoYears",
                "ThreeYears",
                "FourYears",
                "FiveYears",
                "SixYears",
                "SevenYears",
                "EightYears",
                "NineYears",
                "TenYears"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* OneYear - 1 year\r\n* TwoYears - 2 years\r\n* ThreeYears - 3 years\r\n* FourYears - 4 years\r\n* FiveYears - 5 years\r\n* SixYears - 6 years\r\n* SevenYears - 7 years\r\n* EightYears - 8 years\r\n* NineYears - 9 years\r\n* TenYears - 10 years\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "OneYear",
              "TwoYears",
              "ThreeYears",
              "FourYears",
              "FiveYears",
              "SixYears",
              "SevenYears",
              "EightYears",
              "NineYears",
              "TenYears"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* OneYear - 1 year\r\n* TwoYears - 2 years\r\n* ThreeYears - 3 years\r\n* FourYears - 4 years\r\n* FiveYears - 5 years\r\n* SixYears - 6 years\r\n* SevenYears - 7 years\r\n* EightYears - 8 years\r\n* NineYears - 9 years\r\n* TenYears - 10 years\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "Patents.Where.Document": {
        "required": [
          "Query",
          "Fields"
        ],
        "type": "object",
        "properties": {
          "Query": {
            "type": "string",
            "description": "A text expression with words to be found. See [Lucene query syntax](http://www.lucenetutorial.com/lucene-query-syntax.html)"
          },
          "WordsMatch": {
            "type": "string"
          },
          "Fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Languages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allows to target specific languages"
          }
        },
        "description": "A object with doc search criteria"
      },
      "Companies.Where.PeRatio": {
        "anyOf": [
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "Value": {
                    "$ref": "#/components/schemas/Where.PeRatio.Range"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "Top": {
                    "$ref": "#/components/schemas/Companies.Where.PeRatio.Top"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "AbsoluteYears": {
                "type": "array",
                "items": {
                  "enum": [
                    "2020",
                    "2021",
                    "2022",
                    "2023",
                    "2024"
                  ],
                  "type": "string",
                  "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 2020 - 2020\r\n* 2021 - 2021\r\n* 2022 - 2022\r\n* 2023 - 2023\r\n* 2024 - 2024\r\n"
                }
              }
            }
          }
        ]
      },
      "Where.PeRatio.Range": {
        "type": "object",
        "properties": {
          "Min": {
            "type": "number",
            "format": "double"
          },
          "Max": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Companies.Where.PeRatio.Top": {
        "type": "integer"
      },
      "Companies.Where.PostCode": {
        "type": "array",
        "items": {
          "required": [
            "From",
            "To",
            "Country"
          ],
          "type": "object",
          "properties": {
            "From": {
              "type": "string"
            },
            "To": {
              "type": "string"
            },
            "Country": {
              "type": "string"
            },
            "AllAddress": {
              "type": "boolean"
            }
          }
        },
        "description": "A object with postcode criteria"
      },
      "Where.Radius": {
        "type": "object",
        "properties": {
          "PostCode": {
            "type": "string"
          },
          "Radius": {
            "type": "integer"
          },
          "SystemOfMeasurement": {
            "enum": [
              "SI",
              "Imperial"
            ],
            "type": "string",
            "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* SI - International System of Units (km)\r\n* Imperial - Imperial units (miles)\r\n"
          }
        }
      },
      "Companies.Where.Document": {
        "required": [
          "Query",
          "Fields"
        ],
        "type": "object",
        "properties": {
          "Query": {
            "type": "string",
            "description": "A text expression with words to be found. See [Lucene query syntax](http://www.lucenetutorial.com/lucene-query-syntax.html)"
          },
          "WordsMatch": {
            "type": "string"
          },
          "Fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Languages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allows to target specific languages"
          }
        },
        "description": "A object with doc search criteria"
      },
      "Companies.Where.UpdatedReport": {
        "required": [
          "Period"
        ],
        "type": "object",
        "properties": {
          "Period": {
            "required": [
              "Start",
              "End"
            ],
            "type": "object",
            "properties": {
              "Start": {
                "type": "string",
                "format": "date"
              },
              "End": {
                "type": "string",
                "format": "date"
              }
            }
          },
          "AMBestRatings": {
            "type": "array",
            "items": {
              "enum": [
                "AnyChange"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AnyChange - Change in A.M. Best Ratings\r\n"
            }
          },
          "AML": {
            "type": "array",
            "items": {
              "enum": [
                "Added"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Added - Added AML/KYC documents\r\n"
            }
          },
          "CIRatings": {
            "type": "array",
            "items": {
              "enum": [
                "4001",
                "4002",
                "4003",
                "4004",
                "AnyChange"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 4001 - Change in Foreign Currency Long-Term\r\n* 4002 - Change in Foreign Currency Short-Term\r\n* 4003 - Change in Financial Strength\r\n* 4004 - Change in Support\r\n* AnyChange - Change in Capital Intelligence Ratings\r\n"
            }
          },
          "FinancialStrength": {
            "type": "array",
            "items": {
              "enum": [
                "ALBATROSS",
                "CRIF",
                "G2",
                "MORERA",
                "QSCORE",
                "REPRISK",
                "TRUCOST",
                "VADIS",
                "WVB",
                "ZANDERS"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* ALBATROSS - Change in Albatross score\r\n* CRIF - Change in Financial stability score\r\n* G2 - Change in Compass score\r\n* MORERA - Change in MORE evaluation\r\n* QSCORE - Change in Qualitative score\r\n* REPRISK - Change in RepRisk Index\r\n* TRUCOST - Change in Trucost environmental score\r\n* VADIS - Change in Vadis predictive indicators\r\n* WVB - Change in WVB Global score\r\n* ZANDERS - Change in Falcon Counterparty Risk Score (CRS)\r\n"
            }
          },
          "FitchRatings": {
            "type": "array",
            "items": {
              "enum": [
                "1001",
                "1002",
                "1006",
                "1007",
                "1012",
                "1013",
                "1014",
                "1017",
                "AnyChange"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 1001 - Change in Long-Term Issuer Default Rating\r\n* 1002 - Change in Long-Term Issuer Rating\r\n* 1006 - Change in Short-Term Issuer Default Rating\r\n* 1007 - Change in Short-Term Issuer Rating\r\n* 1012 - Change in Bank Support Rating\r\n* 1013 - Change in insurer Financial Strength Rating\r\n* 1014 - Change in Long-Term National Insurer Financial Strength Rating\r\n* 1017 - Change in Viability Rating\r\n* AnyChange - Change in Fitch Ratings\r\n"
            }
          },
          "General": {
            "type": "array",
            "items": {
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "6",
                "7",
                "8",
                "9",
                "A",
                "B",
                "C",
                "E",
                "F",
                "G",
                "H",
                "I",
                "J",
                "K",
                "L",
                "M",
                "MORERA",
                "O",
                "P",
                "Q",
                "R",
                "V",
                "VADIS",
                "X"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - New companies on ORBIS\r\n* 1 - Change of company name (in local or internationally recognised alphabet)\r\n* 2 - Change of address (in local or internationally recognised alphabet)\r\n* 3 - Change of telephone number\r\n* 4 - Change in annuals account\r\n* 6 - Change in advisors\r\n* 7 - Change in M&A Sections\r\n* 8 - Change of status (any change)\r\n* 9 - Change in industry classifications\r\n* A - Change of identification numbers\r\n* B - Change of e-mail address\r\n* C - Change of website address\r\n* E - Change of status to active (default of payment)\r\n* F - Change of status to active (insolvency proceedings)\r\n* G - Change of status to active (dormant)\r\n* H - Change of status to bankruptcy\r\n* I - Change of status to dissolved\r\n* J - Change of status to in liquidation\r\n* K - Change of status to inactive\r\n* L - Change of national legal form\r\n* M - Change in trade description\r\n* MORERA - Change in MORE evaluation\r\n* O - New annual accounts\r\n* P - Revised last year of annual accounts\r\n* Q - New interim accounts\r\n* R - Revised last period of interim accounts\r\n* V - Change of category of the company\r\n* VADIS - Change in VADIS predictive indicators\r\n* X - New annual accounts (ignoring new accounts with limited financials when full accounts are available for the previous year)\r\n"
            }
          },
          "LEGALEVENTS": {
            "type": "array",
            "items": {
              "enum": [
                "AnyChange"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AnyChange - Change of legal event\r\n"
            }
          },
          "MoodysRatings": {
            "type": "array",
            "items": {
              "enum": [
                "2001",
                "2002",
                "2003",
                "2004",
                "2011",
                "2012",
                "2013",
                "2014",
                "2015",
                "AnyChange"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 2001 - Change in Short-Term Rating\r\n* 2002 - Change in Long-Term Rating\r\n* 2003 - Change in Bank Financial Strength\r\n* 2004 - Change in Insurance Financial Strength\r\n* 2011 - Change in Outlook\r\n* 2012 - Change in Baseline Credit Assessment\r\n* 2013 - Change in Adjusted Baseline Credit Assessment\r\n* 2014 - Change in Counterparty Risk Assessment Long-Term\r\n* 2015 - Change in Counterparty Risk Assessment Short-Term\r\n* AnyChange - Change in Moody's Ratings\r\n"
            }
          },
          "MorningstarRatings": {
            "type": "array",
            "items": {
              "enum": [
                "AnyChange"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AnyChange - Change in Morningstar Ratings\r\n"
            }
          },
          "SPRatings": {
            "type": "array",
            "items": {
              "enum": [
                "3001",
                "3002",
                "3003",
                "3004",
                "3005",
                "3006",
                "AnyChange"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 3001 - Change in Foreign Long-Term Issuer Credit Rating\r\n* 3002 - Change in Foreign Short-Term Issuer Credit Rating\r\n* 3003 - Change in Local Long-Term Issuer Credit Rating\r\n* 3004 - Change in Local Short-Term Issuer Credit Rating\r\n* 3005 - Change in Foreign Long-Term Financial Strength\r\n* 3006 - Change in Local Long-Term Financial Strength\r\n* AnyChange - Change in Standard & Poor's Ratings\r\n"
            }
          },
          "Status": {
            "type": "array",
            "items": {
              "enum": [
                "8",
                "E",
                "F",
                "G",
                "H",
                "I",
                "J",
                "K",
                "L",
                "M",
                "N"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* 8 - Change of status (any change)\r\n* E - Change of status to active (default of payment)\r\n* F - Change of status to active (insolvency proceedings)\r\n* G - Change of status to active (dormant)\r\n* H - Change of status to bankruptcy\r\n* I - Change of status to dissolved\r\n* J - Change of status to in liquidation\r\n* K - Change of status to inactive\r\n* L - Change of status to active (rescue plan)\r\n* M - Change of status to active (reorganization)\r\n* N - Change of status to active\r\n"
            }
          },
          "UpdatedCompaniesBasedOnMembershipsWithWocoFlags": {
            "type": "array",
            "items": {
              "enum": [
                "COMMON_DIRECTORS_00",
                "COMMON_DIRECTORS_01",
                "COMMON_DIRECTORS_02",
                "COMMON_DIRECTORS_03",
                "COMMON_DIRECTORS_04",
                "COMMON_DIRECTORS_09"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* COMMON_DIRECTORS_00 - Change in directors & managers\r\n* COMMON_DIRECTORS_01 - Change in Board of Directors\r\n* COMMON_DIRECTORS_02 - Change at level of highest executive(s) (CEO or similar)\r\n* COMMON_DIRECTORS_03 - Others Changes\r\n* COMMON_DIRECTORS_04 - Change among matches for the company’s current directors\r\n* COMMON_DIRECTORS_09 - Change in advisors\r\n"
            }
          },
          "UpdatedStockData": {
            "type": "array",
            "items": {
              "enum": [
                "STOCKDATA_STAT01",
                "STOCKDATA_STAT03"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* STOCKDATA_STAT01 - Listed\r\n* STOCKDATA_STAT03 - Delisted\r\n"
            }
          },
          "UpdatedWoco4OwnerShip": {
            "type": "array",
            "items": {
              "enum": [
                "Ownership_bo_w",
                "Ownership_wof",
                "Ownership_wop"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Ownership_bo_w - Change among matches for the company’s beneficial owners\r\n* Ownership_wof - Change among matches for entities in the company’s corporate group, current shareholders or current subsidiaries\r\n* Ownership_wop - Change in percentage owned by matched shareholders together\r\n"
            }
          },
          "Woco": {
            "type": "array",
            "items": {
              "enum": [
                "IntoSanction",
                "OutSanction",
                "WOCO"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* IntoSanction - Companies that are newly identified\r\n* OutSanction - Companies that are no longer sanctioned by extension\r\n* WOCO - Found for the company itself\r\n"
            }
          }
        }
      },
      "Select.Preset": {
        "type": "object",
        "properties": {
          "Preset": {
            "type": "string",
            "description": "A preset identifier which is like a ListFormat but applied on the SELECT parameter"
          }
        }
      },
      "Select.Entry": {
        "oneOf": [
          {
            "type": "string",
            "description": "The name/id of the field to be retrieved"
          },
          {
            "maxProperties": 1,
            "minProperties": 1,
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Select.EntryObject"
            },
            "description": "The unique property name of this object specifies the field name or modelid or dimensionid requested to the database"
          }
        ],
        "description": "Specify the field requested to the database"
      },
      "Select.EntryObject": {
        "minProperties": 1,
        "type": "object",
        "properties": {
          "As": {
            "type": "string",
            "description": "Property(jsonpath) alias used in the returned value formating. Default is the property name holding this object."
          },
          "Unit": {
            "maximum": 12,
            "minimum": 0,
            "type": "integer",
            "description": "Unit used for monetary values (th, ml)"
          },
          "Currency": {
            "type": "string"
          },
          "Limit": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer"
          },
          "IndexOrYear": {
            "$ref": "#/components/schemas/Select.Entry.IndexOrYear"
          },
          "ModelId": {
            "type": "string",
            "description": "Model to be used"
          },
          "Filters": {
            "$ref": "#/components/schemas/Select.Entry.Filters"
          },
          "FX": {
            "enum": [
              "AtEachClosingDate",
              "AtLastClosingDate",
              "MyRates"
            ],
            "type": "string",
            "description": "Exchange Rate to be used"
          },
          "ValueRange": {
            "enum": [
              "Estimate",
              "LBound",
              "UBound"
            ],
            "type": "string",
            "description": "Determines what type of estimation to use when the value is based on range"
          },
          "Select": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Select.Preset"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Select.Entry"
                }
              }
            ],
            "description": "Select the data field to be returned"
          }
        },
        "description": "This object allows two fine tune the way the associate field(s) is(are) queried and returned"
      },
      "Select.Entry.IndexOrYear": {
        "oneOf": [
          {
            "type": "string",
            "description": "Index in the dimension used"
          },
          {
            "type": "array",
            "items": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            },
            "description": "Array of index in the dimension"
          },
          {
            "maximum": 1000,
            "minimum": 0,
            "type": "integer",
            "description": "One index in the dimension"
          },
          {
            "type": "array",
            "items": {
              "maximum": 2020,
              "minimum": 2010,
              "type": "integer"
            },
            "description": "Array of years in the dimension"
          },
          {
            "maximum": 2020,
            "minimum": 2010,
            "type": "integer",
            "description": "One year in the dimension"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "LY",
                "LY-1",
                "LY-2",
                "LY-3",
                "LY-4",
                "LY-5",
                "LY-6",
                "LY-7",
                "LY-8",
                "LY-9",
                "LY-10",
                "LY-11",
                "LY-12",
                "LY-13",
                "LY-14",
                "LY-15",
                "LY-16",
                "LY-17",
                "LY-18",
                "LY-19",
                "LY-20"
              ],
              "type": "string"
            },
            "description": "Array of relative year selection"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "LY+1",
                "LY+2",
                "LY+3",
                "LY+4",
                "LY+5",
                "LY+6",
                "LY+7",
                "LY+8",
                "LY+9",
                "LY+10",
                "LY+11",
                "LY+12",
                "LY+13",
                "LY+14",
                "LY+15",
                "LY+16",
                "LY+17",
                "LY+18",
                "LY+19",
                "LY+20"
              ],
              "type": "string"
            },
            "description": "Array of relative forecast year selection"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "LQ",
                "LQ-1",
                "LQ-2",
                "LQ-3",
                "LQ-4",
                "LQ-5",
                "LQ-6",
                "LQ-7",
                "LQ-8",
                "LQ-9",
                "LQ-10",
                "LQ-11",
                "LQ-12",
                "LQ-13",
                "LQ-14",
                "LQ-15",
                "LQ-16",
                "LQ-17",
                "LQ-18",
                "LQ-19",
                "LQ-20",
                "LQ-21",
                "LQ-22",
                "LQ-23",
                "LQ-24",
                "LQ-25",
                "LQ-26",
                "LQ-27",
                "LQ-28",
                "LQ-29",
                "LQ-30",
                "LQ-31",
                "LQ-32",
                "LQ-33",
                "LQ-34",
                "LQ-35",
                "LQ-36",
                "LQ-37",
                "LQ-38",
                "LQ-39",
                "LQ-40",
                "LQ-41",
                "LQ-42",
                "LQ-43",
                "LQ-44",
                "LQ-45",
                "LQ-46",
                "LQ-47",
                "LQ-48",
                "LQ-49",
                "LQ-50",
                "LQ-51",
                "LQ-52",
                "LQ-53",
                "LQ-54",
                "LQ-55",
                "LQ-56",
                "LQ-57",
                "LQ-58",
                "LQ-59",
                "LQ-60",
                "LQ-61",
                "LQ-62",
                "LQ-63",
                "LQ-64",
                "LQ-65",
                "LQ-66",
                "LQ-67",
                "LQ-68",
                "LQ-69",
                "LQ-70",
                "LQ-71",
                "LQ-72",
                "LQ-73",
                "LQ-74",
                "LQ-75",
                "LQ-76",
                "LQ-77",
                "LQ-78",
                "LQ-79",
                "LQ-80"
              ],
              "type": "string"
            },
            "description": "Array of relative interim selection"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "LQ+1",
                "LQ+2",
                "LQ+3",
                "LQ+4",
                "LQ+5",
                "LQ+6",
                "LQ+7",
                "LQ+8",
                "LQ+9",
                "LQ+10",
                "LQ+11",
                "LQ+12",
                "LQ+13",
                "LQ+14",
                "LQ+15",
                "LQ+16",
                "LQ+17",
                "LQ+18",
                "LQ+19",
                "LQ+20",
                "LQ+21",
                "LQ+22",
                "LQ+23",
                "LQ+24",
                "LQ+25",
                "LQ+26",
                "LQ+27",
                "LQ+28",
                "LQ+29",
                "LQ+30",
                "LQ+31",
                "LQ+32",
                "LQ+33",
                "LQ+34",
                "LQ+35",
                "LQ+36",
                "LQ+37",
                "LQ+38",
                "LQ+39",
                "LQ+40",
                "LQ+41",
                "LQ+42",
                "LQ+43",
                "LQ+44",
                "LQ+45",
                "LQ+46",
                "LQ+47",
                "LQ+48",
                "LQ+49",
                "LQ+50",
                "LQ+51",
                "LQ+52",
                "LQ+53",
                "LQ+54",
                "LQ+55",
                "LQ+56",
                "LQ+57",
                "LQ+58",
                "LQ+59",
                "LQ+60",
                "LQ+61",
                "LQ+62",
                "LQ+63",
                "LQ+64",
                "LQ+65",
                "LQ+66",
                "LQ+67",
                "LQ+68",
                "LQ+69",
                "LQ+70",
                "LQ+71",
                "LQ+72",
                "LQ+73",
                "LQ+74",
                "LQ+75",
                "LQ+76",
                "LQ+77",
                "LQ+78",
                "LQ+79",
                "LQ+80"
              ],
              "type": "string"
            },
            "description": "Array of relative forecast interim selection"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "2019Q0",
                "2019Q1",
                "2019Q2",
                "2018Q0",
                "2018Q1",
                "2018Q2",
                "2017Q0",
                "2017Q1",
                "2017Q2",
                "2016Q0",
                "2016Q1",
                "2016Q2",
                "2015Q0",
                "2015Q1",
                "2015Q2",
                "2014Q0",
                "2014Q1",
                "2014Q2",
                "2013Q0",
                "2013Q1",
                "2013Q2",
                "2012Q0",
                "2012Q1",
                "2012Q2",
                "2011Q0",
                "2011Q1",
                "2011Q2",
                "2010Q0",
                "2010Q1",
                "2010Q2",
                "2009Q0",
                "2009Q1",
                "2009Q2",
                "2008Q0",
                "2008Q1",
                "2008Q2",
                "2007Q0",
                "2007Q1",
                "2007Q2",
                "2006Q0",
                "2006Q1",
                "2006Q2",
                "2005Q0",
                "2005Q1",
                "2005Q2",
                "2004Q0",
                "2004Q1",
                "2004Q2",
                "2003Q0",
                "2003Q1",
                "2003Q2",
                "2002Q0",
                "2002Q1",
                "2002Q2",
                "2001Q0",
                "2001Q1",
                "2001Q2",
                "2000Q0",
                "2000Q1",
                "2000Q2"
              ],
              "type": "string"
            },
            "description": "Array of absolute interim selection"
          }
        ]
      },
      "Select.Entry.Filters": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.String"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.AgencyFieldRatingFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.FinancialStrengthFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.AdditionnalAddressesFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.ContactsFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.RegulatorsFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.RatingsFilterExport"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.FixedIncomeDataFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.AffiliationFilterWithGuoDefinition"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.CompaniesCounterByStatusFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.FinancialSectionFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.IdentifierCodeFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.CompaniesCountersTypeCountriesIPCClassesYearsFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.CreditDefaultSwapsFilter"
          },
          {
            "$ref": "#/components/schemas/Select.Entry.Filters.Companies.NewsFilter"
          }
        ]
      },
      "Select.Entry.Filters.String": {
        "type": "string",
        "description": "Filters to be used"
      },
      "Select.Entry.Filters.Companies.AgencyFieldRatingFilter": {
        "type": "object",
        "properties": {
          "AgencyFieldRatingFilter": {
            "type": "object"
          }
        }
      },
      "Select.Entry.Filters.Companies.FinancialStrengthFilter": {
        "type": "object",
        "properties": {
          "FinancialStrengthFilter": {
            "type": "object"
          }
        }
      },
      "Select.Entry.Filters.Companies.AdditionnalAddressesFilter": {
        "type": "object",
        "properties": {
          "AdditionnalAddressesFilter": {
            "type": "object",
            "properties": {
              "AddressExcludeFilter": {
                "type": "string"
              },
              "AddressIncludeFilter": {
                "type": "string"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.ContactsFilter": {
        "type": "object",
        "properties": {
          "ContactsFilter": {
            "type": "object",
            "properties": {
              "LevelsQueryString": {
                "type": "string"
              },
              "DepartmentsQueryString": {
                "type": "string"
              },
              "SourcesQueryString": {
                "type": "string"
              },
              "IfHomeOnlyReturnCountry": {
                "type": "integer"
              },
              "ReplaceWorkByCompanyAddressForHierFall2009CodeQueryString": {
                "type": "string"
              },
              "PutCompanyAddressInWorkWhenNoWorkForHierFall2009CodeQueryString": {
                "type": "string"
              },
              "RemoveIfPhoneOnCTPS": {
                "type": "boolean"
              },
              "RemoveIfAddressIsCareOf": {
                "type": "boolean"
              },
              "WantNoSpecified": {
                "type": "boolean"
              },
              "SortByName": {
                "type": "boolean"
              },
              "ConcatenateAllEmails": {
                "type": "boolean"
              },
              "MaxNumberOfPersons": {
                "type": "integer"
              },
              "MaxRangeOfPersons": {
                "type": "integer"
              },
              "MinRangeOfPersons": {
                "type": "integer"
              },
              "EachPersonOnlyOnce": {
                "type": "boolean"
              },
              "StandardFunctionsQueryString": {
                "type": "string"
              },
              "StandardFunctionsExcludeQueryString": {
                "type": "string"
              },
              "PriorityToContactsIfCodeNotMatched": {
                "type": "boolean"
              },
              "KeepHighestPersonsInDepartment": {
                "type": "string"
              },
              "FunctionOriginal": {
                "type": "string"
              },
              "RemoveIfNoPhone": {
                "type": "boolean"
              },
              "NameCompany": {
                "type": "string"
              },
              "IdCompany": {
                "type": "string"
              },
              "ReutersCompany": {
                "type": "string"
              },
              "DunsCompany": {
                "type": "string"
              },
              "UsSicCodeCompany": {
                "type": "string"
              },
              "NaicsCodeCompany": {
                "type": "string"
              },
              "NaceCodeCompany": {
                "type": "string"
              },
              "CountryIsoCompany": {
                "type": "string"
              },
              "AddALabelForTruncationIfMaxNumberOfPersonsIsSet": {
                "type": "boolean"
              },
              "AddALabelIfNoDirsInDepLevFunc": {
                "type": "boolean"
              },
              "RelatedContactsMaxRecusion": {
                "type": "integer"
              },
              "RelatedContactsStopOnUPI": {
                "type": "string"
              },
              "RelatedAbsoluteTotal": {
                "type": "integer"
              },
              "UCI": {
                "type": "string"
              },
              "LastName": {
                "type": "string"
              },
              "FullName": {
                "type": "string"
              },
              "UseFall2009Hierarchy": {
                "type": "boolean"
              },
              "Currents": {
                "type": "boolean"
              },
              "Previous": {
                "type": "boolean"
              },
              "CompanyIsInSoft": {
                "type": "boolean"
              },
              "PriorityToWorkAddress": {
                "type": "integer"
              },
              "PriorityToHomeAddress": {
                "type": "integer"
              },
              "OnlyHomeAddress": {
                "type": "boolean"
              },
              "OnlyContactsAtOtherAddress": {
                "type": "boolean"
              },
              "OnlyContactsAtMainAddress": {
                "type": "boolean"
              },
              "KeepAtMostOnePerson": {
                "type": "boolean"
              },
              "IgnoreFunctionStandardisedHierCodeIfNoneFound": {
                "type": "boolean"
              },
              "AlsoShareholderQueryString": {
                "type": "string"
              },
              "RelatedMaxLevel": {
                "type": "integer"
              },
              "InformalSourcesToExclude": {
                "type": "boolean"
              },
              "CurrentPreviousQueryString": {
                "type": "string"
              },
              "CompanyIsInSoftQueryString": {
                "type": "string"
              },
              "SourcesToExcludeQueryString": {
                "type": "string"
              },
              "CodeStatusCompanyNote56": {
                "type": "string"
              },
              "HierarchicCodeToExcludeQueryString": {
                "type": "string"
              },
              "HierarchicCodeQueryString": {
                "type": "string"
              },
              "HierarchicCodeToExcludeCountQueryString": {
                "type": "string"
              },
              "HierarchicCodeCountQueryString": {
                "type": "string"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.RegulatorsFilter": {
        "type": "object",
        "properties": {
          "RegulatorsFilter": {
            "type": "object",
            "properties": {
              "IsCurrent": {
                "type": "integer"
              },
              "IsObsolete": {
                "type": "integer"
              },
              "RegulatorLevelForCpy": {
                "type": "integer"
              },
              "Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.RatingsFilterExport": {
        "type": "object",
        "properties": {
          "RatingsFilterExport": {
            "type": "object",
            "properties": {
              "AccessibleRatingAgency": {
                "type": "string"
              },
              "Agency": {
                "type": "string"
              },
              "RatingType": {
                "type": "integer"
              },
              "CountryRatings": {
                "type": "boolean"
              },
              "RatingForTiles": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.FixedIncomeDataFilter": {
        "type": "object",
        "properties": {
          "FixedIncomeDataFilter": {
            "type": "object",
            "properties": {
              "IssueTypeListQueryString": {
                "type": "string"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.AffiliationFilterWithGuoDefinition": {
        "type": "object",
        "properties": {
          "AffiliationFilterWithGuoDefinition": {
            "type": "object",
            "properties": {
              "UltimatesOnly": {
                "type": "integer"
              },
              "ListedOnly": {
                "type": "integer"
              },
              "ControllingOnly": {
                "type": "integer"
              },
              "UltimatesIASOnly": {
                "type": "integer"
              },
              "ControlIASOnly": {
                "type": "integer"
              },
              "IsBvDLiensNote53": {
                "type": "integer"
              },
              "IsBvDLiensNote131": {
                "type": "integer"
              },
              "Ultimates": {
                "type": "integer"
              },
              "ControlShareholders": {
                "type": "integer"
              },
              "QuotedShareholders": {
                "type": "integer"
              },
              "UltimatesIASOnlyDiffU": {
                "type": "integer"
              },
              "UltimatesIASOnlyEqU": {
                "type": "integer"
              },
              "ListedIASDefinitionOnly": {
                "type": "integer"
              },
              "DomesticIASUOOnly": {
                "type": "integer"
              },
              "CRIsPartOfGUO": {
                "type": "integer"
              },
              "LIIsPartOfGUO": {
                "type": "integer"
              },
              "DomesticVanDijkUOOnly": {
                "type": "integer"
              },
              "PathToUltimate": {
                "type": "integer"
              },
              "ShowDUOInPathToGUO": {
                "type": "integer"
              },
              "MintControlledSubs": {
                "type": "integer"
              },
              "ReferenceCpyIsTheGUO": {
                "type": "integer"
              },
              "AcceptCTPLinkTo": {
                "type": "integer"
              },
              "CTPLinkToBvdLienId": {
                "type": "string"
              },
              "KeepUONewsInShareholders": {
                "type": "integer"
              },
              "DisplayNewsAboutPathToUltimate": {
                "type": "integer"
              },
              "AffFldIDsIsPathToUO": {
                "type": "boolean"
              },
              "GUOIsIAS": {
                "type": "integer"
              },
              "ShowUOOfJO": {
                "type": "integer"
              },
              "RemoveSubjectFromPathToGUO": {
                "type": "integer"
              },
              "CreatePortfolio": {
                "type": "integer"
              },
              "PortfolioShareholders": {
                "type": "integer"
              },
              "ShowPEfirm": {
                "type": "integer"
              },
              "BvdId": {
                "type": "string"
              },
              "RootBvdId": {
                "type": "string"
              },
              "InformationDate": {
                "type": "integer"
              },
              "ArchivedLinksAfterDate": {
                "type": "integer"
              },
              "ArchivedLinksYear": {
                "type": "integer"
              },
              "ArchivedLinksMonth": {
                "type": "integer"
              },
              "PutActualWithArchivedLinks": {
                "type": "integer"
              },
              "ArchivedDatesFilter": {
                "type": "string"
              },
              "SelectedDate": {
                "type": "string"
              },
              "MinPercent": {
                "type": "integer"
              },
              "MaxPercent": {
                "type": "integer"
              },
              "AllPercOk": {
                "type": "integer"
              },
              "MaxItemsByLevel": {
                "type": "integer"
              },
              "MaxItemsFirstLevel": {
                "type": "integer"
              },
              "KeepOnlyFirstLevelsSubs": {
                "type": "boolean"
              },
              "AddLabelOnTruncatedRecursion": {
                "type": "integer"
              },
              "ExcludeUnkwownPercentage": {
                "type": "boolean"
              },
              "OnlyUOandCRLinks": {
                "type": "boolean"
              },
              "Percent": {
                "type": "string"
              },
              "PercentAsDouble": {
                "type": "string"
              },
              "LimitGUOToFollowingTypes": {
                "type": "string"
              },
              "RecursionLevel": {
                "type": "integer"
              },
              "PathSortCriteria": {
                "type": "integer"
              },
              "RemoveBranches": {
                "type": "integer"
              },
              "RemoveVessels": {
                "type": "integer"
              },
              "UseBranchHeadQuarter": {
                "type": "integer"
              },
              "AlsoSelectNotListedShareholders": {
                "type": "integer"
              },
              "LiabilityRelation": {
                "type": "boolean"
              },
              "WantDivestingShareholders": {
                "type": "boolean"
              },
              "ShowAllOtherRoles": {
                "type": "boolean"
              },
              "Previous": {
                "type": "integer"
              },
              "BothPreviousCurrentLinks": {
                "type": "integer"
              },
              "Name": {
                "type": "string"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.CompaniesCounterByStatusFilter": {
        "type": "object",
        "properties": {
          "CompaniesCounterByStatusFilter": {
            "type": "object",
            "properties": {
              "UseFirstMatch": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.FinancialSectionFilter": {
        "type": "object",
        "properties": {
          "FinancialSectionFilter": {
            "type": "object",
            "properties": {
              "IsLastDate": {
                "type": "boolean"
              },
              "ReferenceField": {
                "type": "string"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.IdentifierCodeFilter": {
        "type": "object",
        "properties": {
          "IdentifierCodeFilter": {
            "type": "object",
            "properties": {
              "Codes": {
                "type": "string"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.CompaniesCountersTypeCountriesIPCClassesYearsFilter": {
        "type": "object",
        "properties": {
          "CompaniesCountersTypeCountriesIPCClassesYearsFilter": {
            "type": "object",
            "properties": {
              "TypesQueryString": {
                "type": "string"
              },
              "CountriesQueryString": {
                "type": "string"
              },
              "Year": {
                "type": "integer"
              },
              "YearMin": {
                "type": "integer"
              },
              "YearMax": {
                "type": "integer"
              },
              "UseFirstMatch": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.CreditDefaultSwapsFilter": {
        "type": "object",
        "properties": {
          "CreditDefaultSwapsFilter": {
            "type": "object",
            "properties": {
              "LatestCDS": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "Select.Entry.Filters.Companies.NewsFilter": {
        "type": "object",
        "properties": {
          "NewsFilter": {
            "type": "object",
            "properties": {
              "NewsId": {
                "type": "string"
              },
              "ProviderNewsId": {
                "type": "string"
              },
              "PublicationCodes": {
                "type": "string"
              },
              "NewsProviderId": {
                "type": "string"
              },
              "DealNumber": {
                "type": "string"
              },
              "UseSoftSpecificNews": {
                "type": "boolean"
              },
              "ConnectToBvDNews": {
                "type": "boolean"
              },
              "NewsMaxCount": {
                "type": "integer"
              },
              "NewsMinIndex": {
                "type": "integer"
              },
              "IndustryNews": {
                "type": "boolean"
              },
              "IncludeType": {
                "type": "string"
              },
              "ExcludeType": {
                "type": "string"
              },
              "TypeAnnonce": {
                "type": "string"
              },
              "SentimentScore": {
                "type": "integer"
              },
              "FullTextQuery": {
                "type": "string"
              },
              "NegativeFullTextQuery": {
                "type": "string"
              },
              "MinDateStr": {
                "type": "string"
              },
              "MaxDateStr": {
                "type": "string"
              },
              "UseFullDate": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "Select.SortEntry": {
        "oneOf": [
          {
            "type": "string",
            "description": "The name/id of the field to be retrieved"
          },
          {
            "maxProperties": 1,
            "minProperties": 1,
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Select.SortEntryObject"
            },
            "description": "The unique property name of this object specifies the field name or modelid or dimensionid requested to the database"
          }
        ],
        "description": "Specify the field requested to the database"
      },
      "Select.SortEntryObject": {
        "minProperties": 1,
        "type": "object",
        "properties": {
          "As": {
            "type": "string",
            "description": "Property(jsonpath) alias used in the returned value formating. Default is the property name holding this object."
          },
          "Unit": {
            "maximum": 12,
            "minimum": 0,
            "type": "integer",
            "description": "Unit used for monetary values (th, ml)"
          },
          "Currency": {
            "type": "string"
          }
        },
        "description": "This object allows two fine tune the way the associate field(s) is(are) queried and returned"
      },
      "Data.Response.OK": {
        "type": "object",
        "properties": {
          "SearchSummary": {
            "type": "object",
            "description": "Generic information about the request"
          },
          "Data": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "This object will have properties matching the names(or Alias) specified in the Query.Select.The value of the properties will contains the data."
            },
            "description": "An array with an object per record"
          }
        },
        "description": "A list of values defined by Select and matching Where criteria"
      },
      "Response.BadRequest": {
        "required": [
          "At"
        ],
        "type": "object",
        "properties": {
          "At": {
            "type": "string",
            "description": "Json path of the object in the request that is faulty"
          },
          "Verb": {
            "type": "string",
            "description": "The type of object being parsed"
          },
          "Expect": {
            "type": "object",
            "properties": {
              "type:": {
                "type": "string",
                "description": "The Json type of the token expected to be found"
              },
              "choices:": {
                "type": "string",
                "description": "Some choices suggestion"
              },
              "condition:": {
                "type": "string",
                "description": "Additional condition to follow"
              }
            },
            "description": "Description of what is expected to be found"
          },
          "Found": {
            "type": "object",
            "properties": {
              "type:": {
                "type": "string",
                "description": "The Json type of the token expected to be found"
              },
              "choices:": {
                "type": "string",
                "description": "Some choices suggestion"
              },
              "condition:": {
                "type": "string",
                "description": "Additional condition to follow"
              }
            },
            "description": "Description of what have been found (and is faulty)"
          },
          "Schema": {
            "description": "The swagger/openapi schema that should be matched by this node"
          }
        }
      },
      "Store.Response.OK": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string"
          }
        ]
      },
      "RecordsSet.List.Response.OK": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RecordSet.Summary"
        }
      },
      "RecordSet.Summary": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Comments": {
            "type": "string"
          },
          "LastModifiedUTC": {
            "type": "string",
            "format": "date-time"
          },
          "Owner": {
            "type": "boolean"
          },
          "Shared": {
            "type": "boolean"
          },
          "Count": {
            "type": "integer"
          }
        }
      },
      "Companies.Store.Query": {
        "required": [
          "Where",
          "Options"
        ],
        "type": "object",
        "properties": {
          "Globals": {
            "$ref": "#/components/schemas/Companies.Globals"
          },
          "Where": {
            "$ref": "#/components/schemas/Companies.Where"
          },
          "OrderBy": {
            "maxProperties": 1,
            "minProperties": 1,
            "type": "object",
            "properties": {
              "DESC": {
                "$ref": "#/components/schemas/Select.SortEntry"
              },
              "ASC": {
                "$ref": "#/components/schemas/Select.SortEntry"
              }
            },
            "description": "Sort the result array using the field(s) defined here."
          },
          "Range": {
            "type": "object",
            "properties": {
              "Max": {
                "maximum": 4000,
                "minimum": 0,
                "type": "integer",
                "description": "Maximum number of records returned"
              },
              "Offset": {
                "type": "integer",
                "description": "Index of the first (sorted)records that is returned"
              }
            }
          },
          "Options": {
            "$ref": "#/components/schemas/Store.Creation.Option"
          }
        }
      },
      "Store.Creation.Option": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Comments": {
            "type": "string",
            "description": "Some free text comments about this record set"
          }
        }
      },
      "RecordsSet.Explore.Response.OK": {
        "type": "object",
        "properties": {
          "Summary": {
            "$ref": "#/components/schemas/RecordSet.Summary"
          },
          "Links": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "BvdId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PreSet.List.Response.OK": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Preset.Summary"
        }
      },
      "Preset.Summary": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Comment": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Query": {
            "type": "string"
          }
        }
      },
      "Ownership.Query": {
        "required": [
          "Where"
        ],
        "type": "object",
        "properties": {
          "Globals": {
            "$ref": "#/components/schemas/Companies.Globals"
          },
          "Where": {
            "$ref": "#/components/schemas/Companies.Where"
          },
          "Select": {
            "type": "array",
            "items": {
              "enum": [
                "ROOT_NAME",
                "INTEGRATED_PERCENTAGE",
                "INTEGRATED_PERCENTAGE_ESTIMATION",
                "BO",
                "ROOT_ENTITY_TYPE",
                "ROOT_NAME_LOCAL",
                "ROOT_AKA_NAME",
                "STANDARDISED_LEGAL_FORM",
                "NATIONAL_LEGAL_FORM",
                "ROOT_ENTITY_TYPE_CODE",
                "ROOT_COUNTRY_ISO_CODE",
                "ROOT_COUNTRY",
                "COUNTRY_REGION",
                "COUNTRY_REGION_TYPE",
                "ROOT_CITY",
                "ROOT_POSTCODE",
                "ROOT_BVD_ID_NUMBER",
                "ROOT_BVD9",
                "ROOT_TICKER",
                "ROOT_NACE_CORE_CODE",
                "ROOT_NACE_CORE_LABEL",
                "ROOT_NAICS_CORE_CODE",
                "ROOT_NAICS_CORE_LABEL",
                "ROOT_USSIC_CORE_CODE",
                "ROOT_USSIC_CORE_LABEL",
                "USSIC_SECONDARY_CODE",
                "USSIC_SECONDARY_LABEL",
                "ROOT_SALUTATION",
                "ROOT_FIRST_NAME",
                "ROOT_LAST_NAME",
                "ROOT_UCI",
                "ROOT_BIRTHDATE",
                "OE_OWNERSHIP_ROLE",
                "OE_DISTANCE",
                "OE_DIRECT_PCT",
                "OE_TOTAL_PCT",
                "OE_INFORMATION_SOURCE",
                "OE_INFORMATION_DATE",
                "INDEPENDENCE_INDICATOR",
                "ISH_NAME",
                "ISH_BVD_ID_NUMBER",
                "ISH_COUNTRY_ISO_CODE",
                "DUO_NAME",
                "DUO_BVD_ID_NUMBER",
                "DUO_COUNTRY_ISO_CODE",
                "GUO_NAME",
                "GUO_BVD_ID_NUMBER",
                "GUO_COUNTRY_ISO_CODE",
                "ROOT_OPRE",
                "ROOT_TOAS",
                "ROOT_EMPL",
                "ROOT_LAST_CLOSING_DATE"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* ROOT_NAME - Name\r\n* INTEGRATED_PERCENTAGE - Integrated percentage\r\n* INTEGRATED_PERCENTAGE_ESTIMATION - Integrated percentage estimation\r\n* BO - Is benecifial owner\r\n* ROOT_ENTITY_TYPE - Entity type label\r\n* ROOT_NAME_LOCAL - Name in original language\r\n* ROOT_AKA_NAME - Also known as name\r\n* STANDARDISED_LEGAL_FORM - Standardised legal form\r\n* NATIONAL_LEGAL_FORM - National legal form\r\n* ROOT_ENTITY_TYPE_CODE - Type of entity\r\n* ROOT_COUNTRY_ISO_CODE - Country ISO code\r\n* ROOT_COUNTRY - Country (label)\r\n* COUNTRY_REGION - Region in country (label)\r\n* COUNTRY_REGION_TYPE - Type of region in country\r\n* ROOT_CITY - City\r\n* ROOT_POSTCODE - Postcode\r\n* ROOT_BVD_ID_NUMBER - BvD ID number\r\n* ROOT_BVD9 - BvD9 number\r\n* ROOT_TICKER - Ticker symbol\r\n* ROOT_NACE_CORE_CODE - NACE, Core code\r\n* ROOT_NACE_CORE_LABEL - NACE, text description\r\n* ROOT_NAICS_CORE_CODE - NAICS, Core code\r\n* ROOT_NAICS_CORE_LABEL - NAICS, text description\r\n* ROOT_USSIC_CORE_CODE - US SIC, primary code(s)\r\n* ROOT_USSIC_CORE_LABEL - US SIC, primary code(s) text description\r\n* USSIC_SECONDARY_CODE - US SIC, secondary code(s)\r\n* USSIC_SECONDARY_LABEL - US SIC, secondary code(s) text description\r\n* ROOT_SALUTATION - Salutation\r\n* ROOT_FIRST_NAME - First and middle name\r\n* ROOT_LAST_NAME - Last name\r\n* ROOT_UCI - UCI\r\n* ROOT_BIRTHDATE - Birth date\r\n* OE_OWNERSHIP_ROLE - Ownership role\r\n* OE_DISTANCE - Distance\r\n* OE_DIRECT_PCT - Direct %\r\n* OE_TOTAL_PCT - Total %\r\n* OE_INFORMATION_SOURCE - Source\r\n* OE_INFORMATION_DATE - Date\r\n* INDEPENDENCE_INDICATOR - BvD Independence Indicator\r\n* ISH_NAME - Immediate parent name\r\n* ISH_BVD_ID_NUMBER - Immediate parent BvD ID number\r\n* ISH_COUNTRY_ISO_CODE - Immediate parent country ISO\r\n* DUO_NAME - Domestic Ultimate Owner name\r\n* DUO_BVD_ID_NUMBER - Domestic Ultimate Owner BvD ID number\r\n* DUO_COUNTRY_ISO_CODE - Domestic Ultimate Owner country ISO\r\n* GUO_NAME - Global Ultimate Owner name\r\n* GUO_BVD_ID_NUMBER - Global Ultimate Owner BvD ID number\r\n* GUO_COUNTRY_ISO_CODE - Global Ultimate Owner country ISO\r\n* ROOT_OPRE - Operating revenue (Turnover)\r\n* ROOT_TOAS - Total assets\r\n* ROOT_EMPL - Number of employees\r\n* ROOT_LAST_CLOSING_DATE - Latest account date\r\n"
            }
          },
          "Options": {
            "type": "object",
            "properties": {
              "Shareholders": {
                "type": "boolean",
                "description": "Display Shareholders"
              },
              "Subsidiaries": {
                "type": "boolean",
                "description": "Display Subsidiaries"
              },
              "Percentage": {
                "type": "object",
                "properties": {
                  "Minimum": {
                    "maximum": 7.922816251426434e+28,
                    "minimum": 0,
                    "type": "number",
                    "description": "Minimum ownership percentage",
                    "format": "double"
                  },
                  "UnknownValue": {
                    "type": "boolean",
                    "description": "Include entities with an unknown ownership percentage"
                  },
                  "IntegratedPercentage": {
                    "type": "boolean",
                    "description": "Use integrated percentage"
                  }
                }
              },
              "Distance": {
                "maximum": 10,
                "minimum": 1,
                "type": "integer",
                "description": "Maximum distance from subject"
              },
              "LocatedAbroadOnly": {
                "type": "boolean",
                "description": "Only companies located abroad"
              },
              "CountryRegion": {
                "oneOf": [
                  {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Where.IdsObject"
                      },
                      {
                        "maxProperties": 1,
                        "minProperties": 0,
                        "type": "object",
                        "properties": {
                          "AddressType": {
                            "oneOf": [
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          }
                        },
                        "description": "All properties that can modify some selection"
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Where.TextObject"
                      },
                      {
                        "maxProperties": 1,
                        "minProperties": 0,
                        "type": "object",
                        "properties": {
                          "AddressType": {
                            "oneOf": [
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          }
                        },
                        "description": "All properties that can modify some selection"
                      }
                    ]
                  }
                ]
              },
              "NACE2": {
                "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
              },
              "NAICS2017": {
                "$ref": "#/components/schemas/Companies.Where.CodeCodeType"
              },
              "NumberOfEmployees": {
                "$ref": "#/components/schemas/Bounds"
              },
              "OperatingRevenue": {
                "$ref": "#/components/schemas/Bounds"
              },
              "TotalAssets": {
                "$ref": "#/components/schemas/Bounds"
              },
              "Types": {
                "type": "object",
                "properties": {
                  "Bank": {
                    "type": "boolean",
                    "description": "Include banks"
                  },
                  "FinancialCompany": {
                    "type": "boolean",
                    "description": "Include financial companies"
                  },
                  "InsuranceCompany": {
                    "type": "boolean",
                    "description": "Include insurances companies"
                  },
                  "Corporate": {
                    "type": "boolean",
                    "description": "Include corporate companies"
                  },
                  "PrivateEquityFirm": {
                    "type": "boolean",
                    "description": "Include private equity firms"
                  },
                  "HedgeFund": {
                    "type": "boolean",
                    "description": "Include hedge funds"
                  },
                  "VentureCapital": {
                    "type": "boolean",
                    "description": "Include venture capitals"
                  },
                  "MutualPensionFundOrTrust": {
                    "type": "boolean",
                    "description": "Include mutual & pension Fund/Nominee/Trust/Trustee"
                  },
                  "Foundation": {
                    "type": "boolean",
                    "description": "Include foundation/research institutes"
                  },
                  "PublicAuthority": {
                    "type": "boolean",
                    "description": "Include public authorities, states, governments"
                  },
                  "Individual": {
                    "type": "boolean",
                    "description": "Include individuals"
                  },
                  "ManagerOrDirector": {
                    "type": "boolean",
                    "description": "Include employees/managers/directors"
                  },
                  "PubliclyListedCompanies": {
                    "type": "boolean",
                    "description": "Include public (publicly listed companies)"
                  },
                  "OtherUnnamedShareholders": {
                    "type": "boolean",
                    "description": "Include other unnamed shareholders, aggregated"
                  },
                  "UnnamedPrivateShareholders": {
                    "type": "boolean",
                    "description": "Include unnamed private shareholders, aggregated"
                  }
                }
              },
              "Branches": {
                "type": "boolean",
                "description": "Include branches"
              },
              "MarineVessels": {
                "type": "boolean",
                "description": "Include marine vessels"
              },
              "TaxRate": {
                "$ref": "#/components/schemas/Bounds"
              },
              "UltimateOwnerRestriction": {
                "enum": [
                  "PhysicalPersons",
                  "MoralPersons"
                ],
                "type": "string",
                "description": "Ultimate beneficial owner type (physical or moral person)\r\n\r\nEnum Description\r\n\r\n\r\n* PhysicalPersons - PhysicalPersons\r\n* MoralPersons - MoralPersons\r\n"
              },
              "IntermediaryNodes": {
                "type": "boolean",
                "description": "Include intermediary nodes"
              },
              "GPLinks": {
                "type": "boolean",
                "description": "Consider GP partner as beneficial owners"
              }
            }
          }
        }
      },
      "Bounds": {
        "type": "object",
        "properties": {
          "Minimum": {
            "maximum": 7.922816251426434e+28,
            "minimum": 0,
            "type": "number",
            "description": "Minimum value",
            "format": "double"
          },
          "Maximum": {
            "maximum": 7.922816251426434e+28,
            "minimum": 0,
            "type": "number",
            "description": "Maximum value",
            "format": "double"
          },
          "UnknownValue": {
            "type": "boolean",
            "description": "Include entities with an unknown value"
          }
        },
        "description": "Specify the limits to be applied on some Ownership options criteria"
      },
      "CustomData.Picklist": {
        "required": [
          "Id",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The id of the picklist"
          },
          "Name": {
            "type": "string",
            "description": "The name of the picklist"
          },
          "Readonly": {
            "type": "boolean",
            "description": "Is the picklist readonly"
          },
          "Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomData.PicklistField"
            }
          }
        }
      },
      "CustomData.PicklistField": {
        "required": [
          "Id",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The id of the field"
          },
          "Type": {
            "type": "string",
            "description": "The type of the field"
          }
        }
      },
      "CustomData.CustomKeyTable": {
        "required": [
          "Id",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The id of the table"
          },
          "Name": {
            "type": "string",
            "description": "The name of the table"
          },
          "Readonly": {
            "type": "boolean",
            "description": "Is the table readonly"
          },
          "Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomData.Field"
            }
          }
        }
      },
      "CustomData.Field": {
        "required": [
          "Id",
          "Name",
          "FieldType"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The id of the field"
          },
          "Name": {
            "type": "string",
            "description": "The name of the field"
          },
          "Readonly": {
            "type": "boolean",
            "description": "Is the field readonly"
          },
          "FieldType": {
            "enum": [
              "BigText",
              "Date",
              "DateTime",
              "Decimal",
              "ForeignKey",
              "Identifier",
              "MoneyValue",
              "Number",
              "Percent",
              "Permille",
              "Picklist",
              "Text"
            ],
            "type": "string",
            "description": "The type of the field"
          },
          "References": {
            "type": "string",
            "description": "The name of the table this field references"
          },
          "Decimals": {
            "type": "integer",
            "description": "The number of decimals for this field"
          },
          "Currency": {
            "type": "string",
            "description": "The currency of this field"
          },
          "DateField": {
            "type": "string",
            "description": "The reference date of this field"
          }
        }
      },
      "CustomData.Table": {
        "required": [
          "Id",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The id of the table"
          },
          "Name": {
            "type": "string",
            "description": "The name of the table"
          },
          "Readonly": {
            "type": "boolean",
            "description": "Is the table readonly"
          },
          "Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomData.Field"
            }
          },
          "ChildTables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomData.Table"
            }
          }
        }
      },
      "CustomData.Data": {
        "required": [
          "Tables"
        ],
        "type": "object",
        "properties": {
          "Globals": {
            "type": "object",
            "properties": {
              "DefaultCurrency": {
                "$ref": "#/components/schemas/Currency"
              },
              "UseOwnExchangeRates": {
                "type": "boolean",
                "description": "Use own exchange rates, default is false"
              }
            },
            "description": "Default parameters for this action"
          },
          "Tables": {
            "minProperties": 1,
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomData.DataRecord"
                  }
                },
                {
                  "$ref": "#/components/schemas/CustomData.TableData"
                }
              ]
            },
            "description": "The properties of this object correspond to the Ids of the tables to which data will be added"
          }
        }
      },
      "CustomData.DataRecord": {
        "type": "object",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/CustomData.Value"
            },
            {
              "required": [
                "Value"
              ],
              "type": "object",
              "properties": {
                "Value": {
                  "$ref": "#/components/schemas/CustomData.Value"
                },
                "Currency": {
                  "$ref": "#/components/schemas/Currency"
                }
              },
              "description": "Object to set the value and currency of the field"
            }
          ],
          "description": "The property corresponds to the Id of a field in the table"
        }
      },
      "CustomData.Value": {
        "oneOf": [
          {
            "type": "integer",
            "nullable": true
          },
          {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          {
            "type": "string",
            "nullable": true
          }
        ],
        "description": "The value in the correct type for the field. Use null when no value is available."
      },
      "CustomData.TableData": {
        "required": [
          "Columns",
          "Data"
        ],
        "type": "object",
        "properties": {
          "DefaultCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "UseOwnExchangeRates": {
            "type": "boolean",
            "description": "Use own exchange rates, default is false"
          },
          "Columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomData.Column"
            }
          },
          "Data": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "description": "Data for a CustomData table"
      },
      "CustomData.Column": {
        "oneOf": [
          {
            "required": [
              "FieldId"
            ],
            "type": "object",
            "properties": {
              "FieldId": {
                "type": "string",
                "description": "Id of a field in the table"
              },
              "Currency": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          {
            "required": [
              "CurrencyColumnFor"
            ],
            "type": "object",
            "properties": {
              "CurrencyColumnFor": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "In case this column contains currencies for one or more fields"
              }
            }
          }
        ],
        "description": "Definition of a column in the data"
      },
      "CustomData.Records": {
        "required": [
          "Tables"
        ],
        "type": "object",
        "properties": {
          "Tables": {
            "minProperties": 1,
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomData.TableRecords"
            },
            "description": "The properties of this object correspond to the Ids of the tables from which the records will be removed"
          }
        }
      },
      "CustomData.TableRecords": {
        "maxProperties": 1,
        "minProperties": 1,
        "type": "object",
        "additionalProperties": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The key values for identifier field of the records to be removed"
            },
            {
              "type": "string",
              "description": "The key values for identifier field of the records to be removed"
            }
          ]
        },
        "description": "The single property of this object correspond to the Id of an idenfier field in the table, or the Id of the parent identifier field"
      },
      "Contacts.Data.Query": {
        "required": [
          "Where"
        ],
        "type": "object",
        "properties": {
          "Globals": {
            "$ref": "#/components/schemas/Contacts.Globals"
          },
          "Where": {
            "$ref": "#/components/schemas/Contacts.Where"
          },
          "Select": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Select.Preset"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Select.Entry"
                }
              }
            ],
            "description": "SELECT which data of the records found should be returned.Select the data field to be returned"
          },
          "OrderBy": {
            "maxProperties": 1,
            "minProperties": 1,
            "type": "object",
            "properties": {
              "DESC": {
                "$ref": "#/components/schemas/Select.SortEntry"
              },
              "ASC": {
                "$ref": "#/components/schemas/Select.SortEntry"
              }
            },
            "description": "Sort the result array using the field(s) defined here."
          },
          "Range": {
            "type": "object",
            "properties": {
              "Max": {
                "maximum": 4000,
                "minimum": 0,
                "type": "integer",
                "description": "Maximum number of records returned"
              },
              "Offset": {
                "type": "integer",
                "description": "Index of the first (sorted)records that is returned"
              }
            }
          }
        }
      },
      "Contacts.Globals": {
        "type": "object",
        "properties": {
          "Preferences": {
            "$ref": "#/components/schemas/Contacts.Preferences"
          },
          "Language": {
            "$ref": "#/components/schemas/Language"
          },
          "SelectDefault": {
            "$ref": "#/components/schemas/Contacts.SelectDefault"
          },
          "BODefinition": {
            "$ref": "#/components/schemas/Contacts.BODefinition"
          },
          "GUODefinition": {
            "$ref": "#/components/schemas/Contacts.GUODefinition"
          }
        },
        "description": "All parameters that have a global impact on the results"
      },
      "Contacts.Preferences": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "AllStatement"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllStatement - \r\n"
            }
          },
          {
            "enum": [
              "AllStatement"
            ],
            "type": "string",
            "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllStatement - \r\n"
          }
        ]
      },
      "Contacts.SelectDefault": {
        "type": "object",
        "properties": {
          "Currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "Unit": {
            "enum": [
              0,
              3,
              6,
              9
            ],
            "type": "integer",
            "description": "Let the user specify the unit preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Units\r\n* 3 - thousand\r\n* 6 - million\r\n* 9 - billion\r\n"
          },
          "Limit": {
            "type": "integer",
            "description": "Let the user specify the repeating limit preference globally"
          },
          "ModelId": {
            "enum": [
              "U"
            ],
            "type": "string",
            "description": "Let the user specify the model preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* U - All templates\r\n"
          },
          "FX": {
            "enum": [
              "AtEachClosingDate",
              "AtLastClosingDate",
              "MyRates"
            ],
            "type": "string",
            "description": "Let the user specify the foreign exchange preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* AtEachClosingDate - AtEachClosingDate\r\n* AtLastClosingDate - AtLastClosingDate\r\n* MyRates - MyRates\r\n"
          },
          "VALUERANGE": {
            "enum": [
              "Estimate",
              "LBound",
              "UBound"
            ],
            "type": "string",
            "description": "Let the user specify determines what type of estimation to use when the value is based on range preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* Estimate - Estimate\r\n* LBound - LBound\r\n* UBound - UBound\r\n"
          }
        }
      },
      "Contacts.BODefinition": {
        "type": "object",
        "properties": {
          "FirstLevelMinimumPercentage": {
            "maximum": 100,
            "minimum": 5,
            "type": "number",
            "description": "The minimum percentage for BO at first level must be between 5% and 100%",
            "format": "double"
          },
          "FurtherLevelsMinimumPercentage": {
            "maximum": 100,
            "minimum": 5,
            "type": "number",
            "description": "The minimum percentage for BO at any level must be between 5% and 100%",
            "format": "double"
          },
          "TopShareholdersWithUnknownPercentage": {
            "type": "boolean",
            "description": "Consider individuals at the top with an unknown percentage as beneficial owner"
          },
          "TopShareholdersWithFirstLevelMinimumPercentage": {
            "enum": [
              "FollowingPathDefinition",
              "Path100Percent"
            ],
            "type": "string",
            "description": "Consider individuals at the top with minimum percentage at first level and with either minimum percentage at further levels or 100% at further levels.\r\n\r\nEnum Description\r\n\r\n\r\n* FollowingPathDefinition - FollowingPathDefinition\r\n* Path100Percent - Path100Percent\r\n"
          }
        }
      },
      "Contacts.GUODefinition": {
        "type": "object",
        "properties": {
          "MinimumPercentage": {
            "enum": [
              50.01,
              25.01
            ],
            "type": "number",
            "format": "double"
          },
          "UnidentifiedShareholders": {
            "type": "boolean",
            "description": "I consider a company to be an Ultimate Owner if it has no identified shareholders or if its shareholder's percentages are not known."
          },
          "HighestQuoted": {
            "type": "boolean",
            "description": "I want the highest quoted company to be considered the Ultimate Owner."
          },
          "Types": {
            "type": "object",
            "properties": {
              "Bank": {
                "type": "boolean",
                "description": "Include banks"
              },
              "FinancialCompany": {
                "type": "boolean",
                "description": "Include financial companies"
              },
              "InsuranceCompany": {
                "type": "boolean",
                "description": "Include insurance companies"
              },
              "Corporate": {
                "type": "boolean",
                "description": "Include corporate companies"
              },
              "PrivateEquityFirm": {
                "type": "boolean",
                "description": "Include private equity firms"
              },
              "HedgeFund": {
                "type": "boolean",
                "description": "Include hedge funds"
              },
              "VentureCapital": {
                "type": "boolean",
                "description": "Include venture capitals"
              },
              "MutualPensionFundOrTrust": {
                "type": "boolean",
                "description": "Include mutual & pension Fund/Nominee/Trust/Trustee"
              },
              "Foundation": {
                "type": "boolean",
                "description": "Include foundation/research institutes"
              },
              "PublicAuthority": {
                "type": "boolean",
                "description": "Include public authorities, states, governments"
              },
              "Individual": {
                "type": "boolean",
                "description": "Include individuals"
              },
              "ManagerOrDirector": {
                "type": "boolean",
                "description": "Include employees/managers/directors"
              }
            }
          }
        }
      },
      "News.Data.Query": {
        "required": [
          "Where"
        ],
        "type": "object",
        "properties": {
          "Globals": {
            "$ref": "#/components/schemas/News.Globals"
          },
          "Where": {
            "$ref": "#/components/schemas/News.Where"
          },
          "Select": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Select.Preset"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Select.Entry"
                }
              }
            ],
            "description": "SELECT which data of the records found should be returned.Select the data field to be returned"
          },
          "OrderBy": {
            "maxProperties": 1,
            "minProperties": 1,
            "type": "object",
            "properties": {
              "DESC": {
                "$ref": "#/components/schemas/Select.SortEntry"
              },
              "ASC": {
                "$ref": "#/components/schemas/Select.SortEntry"
              }
            },
            "description": "Sort the result array using the field(s) defined here."
          },
          "Range": {
            "type": "object",
            "properties": {
              "Max": {
                "maximum": 4000,
                "minimum": 0,
                "type": "integer",
                "description": "Maximum number of records returned"
              },
              "Offset": {
                "type": "integer",
                "description": "Index of the first (sorted)records that is returned"
              }
            }
          }
        }
      },
      "News.Globals": {
        "type": "object",
        "properties": {
          "Preferences": {
            "$ref": "#/components/schemas/News.Preferences"
          },
          "Language": {
            "$ref": "#/components/schemas/Language"
          },
          "SelectDefault": {
            "$ref": "#/components/schemas/News.SelectDefault"
          },
          "BODefinition": {
            "$ref": "#/components/schemas/News.BODefinition"
          },
          "GUODefinition": {
            "$ref": "#/components/schemas/News.GUODefinition"
          }
        },
        "description": "All parameters that have a global impact on the results"
      },
      "News.Preferences": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "AllStatement",
                "GenericStatement"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllStatement - \r\n* GenericStatement - \r\n"
            }
          },
          {
            "enum": [
              "AllStatement",
              "GenericStatement"
            ],
            "type": "string",
            "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* AllStatement - \r\n* GenericStatement - \r\n"
          }
        ]
      },
      "News.SelectDefault": {
        "type": "object",
        "properties": {
          "Currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "Unit": {
            "enum": [
              0,
              3,
              6,
              9
            ],
            "type": "integer",
            "description": "Let the user specify the unit preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* 0 - Units\r\n* 3 - thousand\r\n* 6 - million\r\n* 9 - billion\r\n"
          },
          "Limit": {
            "type": "integer",
            "description": "Let the user specify the repeating limit preference globally"
          },
          "ModelId": {
            "enum": [
              "UNIVERSAL"
            ],
            "type": "string",
            "description": "Let the user specify the model preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* UNIVERSAL - All templates\r\n"
          },
          "FX": {
            "enum": [
              "AtEachClosingDate",
              "AtLastClosingDate",
              "MyRates"
            ],
            "type": "string",
            "description": "Let the user specify the foreign exchange preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* AtEachClosingDate - AtEachClosingDate\r\n* AtLastClosingDate - AtLastClosingDate\r\n* MyRates - MyRates\r\n"
          },
          "VALUERANGE": {
            "enum": [
              "Estimate",
              "LBound",
              "UBound"
            ],
            "type": "string",
            "description": "Let the user specify determines what type of estimation to use when the value is based on range preference globally\r\n\r\nEnum Description\r\n\r\n\r\n* Estimate - Estimate\r\n* LBound - LBound\r\n* UBound - UBound\r\n"
          }
        }
      },
      "News.BODefinition": {
        "type": "object",
        "properties": {
          "FirstLevelMinimumPercentage": {
            "maximum": 100,
            "minimum": 5,
            "type": "number",
            "description": "The minimum percentage for BO at first level must be between 5% and 100%",
            "format": "double"
          },
          "FurtherLevelsMinimumPercentage": {
            "maximum": 100,
            "minimum": 5,
            "type": "number",
            "description": "The minimum percentage for BO at any level must be between 5% and 100%",
            "format": "double"
          },
          "TopShareholdersWithUnknownPercentage": {
            "type": "boolean",
            "description": "Consider individuals at the top with an unknown percentage as beneficial owner"
          },
          "TopShareholdersWithFirstLevelMinimumPercentage": {
            "enum": [
              "FollowingPathDefinition",
              "Path100Percent"
            ],
            "type": "string",
            "description": "Consider individuals at the top with minimum percentage at first level and with either minimum percentage at further levels or 100% at further levels.\r\n\r\nEnum Description\r\n\r\n\r\n* FollowingPathDefinition - FollowingPathDefinition\r\n* Path100Percent - Path100Percent\r\n"
          }
        }
      },
      "News.GUODefinition": {
        "type": "object",
        "properties": {
          "MinimumPercentage": {
            "enum": [
              50.01,
              25.01
            ],
            "type": "number",
            "format": "double"
          },
          "UnidentifiedShareholders": {
            "type": "boolean",
            "description": "I consider a company to be an Ultimate Owner if it has no identified shareholders or if its shareholder's percentages are not known."
          },
          "HighestQuoted": {
            "type": "boolean",
            "description": "I want the highest quoted company to be considered the Ultimate Owner."
          },
          "Types": {
            "type": "object",
            "properties": {
              "Bank": {
                "type": "boolean",
                "description": "Include banks"
              },
              "FinancialCompany": {
                "type": "boolean",
                "description": "Include financial companies"
              },
              "InsuranceCompany": {
                "type": "boolean",
                "description": "Include insurance companies"
              },
              "Corporate": {
                "type": "boolean",
                "description": "Include corporate companies"
              },
              "PrivateEquityFirm": {
                "type": "boolean",
                "description": "Include private equity firms"
              },
              "HedgeFund": {
                "type": "boolean",
                "description": "Include hedge funds"
              },
              "VentureCapital": {
                "type": "boolean",
                "description": "Include venture capitals"
              },
              "MutualPensionFundOrTrust": {
                "type": "boolean",
                "description": "Include mutual & pension Fund/Nominee/Trust/Trustee"
              },
              "Foundation": {
                "type": "boolean",
                "description": "Include foundation/research institutes"
              },
              "PublicAuthority": {
                "type": "boolean",
                "description": "Include public authorities, states, governments"
              },
              "Individual": {
                "type": "boolean",
                "description": "Include individuals"
              },
              "ManagerOrDirector": {
                "type": "boolean",
                "description": "Include employees/managers/directors"
              }
            }
          }
        }
      },
      "News.Where": {
        "oneOf": [
          {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/News.Where"
            },
            "description": "An array of News.Where associated with a boolean AND operation"
          },
          {
            "$ref": "#/components/schemas/News.WhereObject"
          },
          {
            "type": "string",
            "description": "Simple string as criteria name. All records with such a criteria are selected"
          }
        ],
        "description": "Define a way to filter/search records *where* some specified criteria matched some specified values"
      },
      "News.WhereObject": {
        "maxProperties": 1,
        "minProperties": 1,
        "type": "object",
        "properties": {
          "And": {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/News.Where"
            },
            "description": "boolean operator AND applied on the array of object"
          },
          "Or": {
            "maximum": 16,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/News.Where"
            }
          },
          "Not": {
            "maximum": 1,
            "minimum": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/News.Where"
            }
          },
          "RecordSet": {
            "type": "string",
            "description": "Use a selection from the /Store/Recordsets identified by its .Id"
          },
          "DirectSelection": {
            "type": "string"
          },
          "BvDID": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "CompanyNameOrIdDirect": {
            "$ref": "#/components/schemas/Where.FullText"
          },
          "Date": {
            "type": "object",
            "properties": {
              "From": {
                "type": "string",
                "format": "date"
              },
              "To": {
                "type": "string",
                "format": "date"
              }
            }
          },
          "DeletedRecordsStepId": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "FromCompanies": {
            "$ref": "#/components/schemas/Companies.Where"
          },
          "Industry": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "Location": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "NewsText": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "AllWords": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "ONLY_HEADLINES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "ONLY_STORIES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "NoWords": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "ONLY_HEADLINES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "ONLY_STORIES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "AnyWords": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "ONLY_HEADLINES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "ONLY_STORIES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "Phrases": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "ONLY_HEADLINES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "ONLY_STORIES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          },
          "PreIndexedFullText": {
            "$ref": "#/components/schemas/News.Where.PreIndexedFullText"
          },
          "ProviderCompanyIdDirect": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "Publication": {
            "$ref": "#/components/schemas/Where.Ids"
          },
          "PublicationLookup": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "SentimentsScore": {
            "$ref": "#/components/schemas/News.Where.SentimentsScore"
          },
          "TopicHierarchy": {
            "$ref": "#/components/schemas/Where.Code"
          },
          "WordsFullText": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of words by default treated like AllWords"
              },
              {
                "type": "string",
                "description": "An array of words by default treated like AllWords"
              },
              {
                "type": "object",
                "properties": {
                  "Sections": {
                    "type": "array",
                    "items": {
                      "enum": [
                        "ONLY_HEADLINES",
                        "ONLY_STORIES"
                      ],
                      "type": "string",
                      "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* ONLY_HEADLINES - Search headlines only\r\n* ONLY_STORIES - Search articles only\r\n"
                    },
                    "description": "Reduce the section of the text searched to those specified in the array"
                  },
                  "AllWords": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      },
                      {
                        "required": [
                          "ONLY_HEADLINES",
                          "ONLY_STORIES"
                        ],
                        "type": "object",
                        "properties": {
                          "ONLY_HEADLINES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Only search text in the section Search headlines only"
                          },
                          "ONLY_STORIES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Only search text in the section Search articles only"
                          }
                        }
                      }
                    ],
                    "description": "Each words must be present in the record"
                  },
                  "NoWords": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      },
                      {
                        "required": [
                          "ONLY_HEADLINES",
                          "ONLY_STORIES"
                        ],
                        "type": "object",
                        "properties": {
                          "ONLY_HEADLINES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Only search text in the section Search headlines only"
                          },
                          "ONLY_STORIES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Only search text in the section Search articles only"
                          }
                        }
                      }
                    ],
                    "description": "None of the words can be present in the record"
                  },
                  "AnyWords": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      },
                      {
                        "required": [
                          "ONLY_HEADLINES",
                          "ONLY_STORIES"
                        ],
                        "type": "object",
                        "properties": {
                          "ONLY_HEADLINES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Only search text in the section Search headlines only"
                          },
                          "ONLY_STORIES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Only search text in the section Search articles only"
                          }
                        }
                      }
                    ],
                    "description": "At least one of the words can be present in the record"
                  },
                  "Phrases": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      },
                      {
                        "required": [
                          "ONLY_HEADLINES",
                          "ONLY_STORIES"
                        ],
                        "type": "object",
                        "properties": {
                          "ONLY_HEADLINES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Only search text in the section Search headlines only"
                          },
                          "ONLY_STORIES": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Only search text in the section Search articles only"
                          }
                        }
                      }
                    ],
                    "description": "The complete(entire) phrases must be present in the record"
                  }
                }
              }
            ]
          }
        },
        "description": "The definition of a complex search. There is one unique property possible. Each property correspond to one type of search."
      },
      "News.Where.PreIndexedFullText": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "CatalystBadNews"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* CatalystBadNews - Bad news for procurement/credit catalyst (default value)\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "CatalystBadNews"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* CatalystBadNews - Bad news for procurement/credit catalyst (default value)\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      },
      "News.Where.SentimentsScore": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "enum": [
                "Negative",
                "Neutral",
                "Positive"
              ],
              "type": "string",
              "description": "\r\n\r\nEnum Description\r\n\r\n\r\n* Negative - News with a negative sentiment\r\n* Neutral - News with no sentiment\r\n* Positive - News with a positive sentiment\r\n"
            },
            "description": "An id or an array of ids"
          },
          {
            "enum": [
              "Negative",
              "Neutral",
              "Positive"
            ],
            "type": "string",
            "description": "An id or an array of ids\r\n\r\nEnum Description\r\n\r\n\r\n* Negative - News with a negative sentiment\r\n* Neutral - News with no sentiment\r\n* Positive - News with a positive sentiment\r\n"
          }
        ],
        "description": "A object containing the identifier to be matched"
      }
    },
    "responses": {
      "Data.Response.OK": {
        "description": "Data from the server",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Data.Response.OK"
            }
          }
        }
      },
      "Response.BadRequest": {
        "description": "Explanation about why the request is incorrect.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Response.BadRequest"
            }
          }
        }
      },
      "Store.Response.OK": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Store.Response.OK"
            }
          }
        }
      },
      "RecordsSet.List.Response.OK": {
        "description": "List all the RecordSets",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RecordsSet.List.Response.OK"
            }
          }
        }
      },
      "RecordSet.Summary": {
        "description": "Create a new record set",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RecordSet.Summary"
            }
          }
        },
        "links": {
          "exploreRecordSetGet": {
            "operationId": "exploreRecordSetGet"
          },
          "modifyRecordSetsPut": {
            "operationId": "modifyRecordSetsPut"
          },
          "deleteRecordSet": {
            "operationId": "deleteRecordSet"
          }
        }
      },
      "RecordsSet.Explore.Response.OK": {
        "description": "Explore a record set",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RecordsSet.Explore.Response.OK"
            }
          }
        }
      },
      "PreSet.List.Response.OK": {
        "description": "List all the Presets",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PreSet.List.Response.OK"
            }
          }
        }
      },
      "Preset.Summary": {
        "description": "Create a new record set",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Preset.Summary"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Data",
      "description": "Query the database to **Select** data defined by QueryEntry within a set of records define by **Where** critieria."
    },
    {
      "name": "Store",
      "description": "Manage your stored data"
    },
    {
      "name": "RecordSets",
      "description": "Manage your stored records set"
    },
    {
      "name": "Presets",
      "description": "Manage your stored presets"
    },
    {
      "name": "OwnershipExplorer",
      "description": "Query the ownership database to **Select** data defined by QueryEntry within a set of records define by **Where** critieria and **Options**"
    }
  ]
}
